Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> blocks
Rule 2     statement -> import blocks
Rule 3     statement -> package blocks
Rule 4     statement -> package import blocks
Rule 5     statement -> main LBRACE blocks RBRACE
Rule 6     statement -> package main LBRACE blocks RBRACE
Rule 7     statement -> import main LBRACE blocks RBRACE
Rule 8     statement -> package import main LBRACE blocks RBRACE
Rule 9     import -> <empty>
Rule 10    import -> IMPORT CHARSTRING
Rule 11    import -> IMPORT LPAREN values_for_import RPAREN
Rule 12    values_for_import -> CHARSTRING
Rule 13    values_for_import -> CHARSTRING values_for_import
Rule 14    package -> PACKAGE VARIABLE
Rule 15    package -> PACKAGE MAIN
Rule 16    main -> FUNCTION MAIN LPAREN RPAREN
Rule 17    blocks -> block
Rule 18    blocks -> block blocks
Rule 19    blocks -> block SEMICOLON blocks
Rule 20    block -> print_statement
Rule 21    block -> input_statement
Rule 22    block -> operation
Rule 23    block -> data_structure
Rule 24    block -> control_structure
Rule 25    block -> function
Rule 26    block -> variable_declaration
Rule 27    block -> variable_assignation
Rule 28    variables -> VARIABLE
Rule 29    variables -> VARIABLE COMMA variables
Rule 30    value -> VARIABLE
Rule 31    value -> VARIABLE LBRACKET RBRACKET
Rule 32    value -> VARIABLE LBRACKET value RBRACKET
Rule 33    value -> not_variable_value
Rule 34    not_variable_value -> CHARSTRING
Rule 35    not_variable_value -> INT
Rule 36    not_variable_value -> FLOAT
Rule 37    values -> value
Rule 38    values -> value COMMA values
Rule 39    variable_declaration -> VAR variables type
Rule 40    variable_declaration -> VAR variables type ASSIGN value
Rule 41    variable_declaration -> VAR variables type ASSIGN operation
Rule 42    variable_declaration -> VARIABLE SHORTASSIGN value
Rule 43    variable_declaration -> VARIABLE SHORTASSIGN operation
Rule 44    variable_declaration -> CONST VARIABLE ASSIGN value
Rule 45    variable_assignation -> VARIABLE assignation value
Rule 46    variable_assignation -> VARIABLE assignation operation
Rule 47    variable_assignation -> VARIABLE double_operator
Rule 48    variable_assignation -> map_assign
Rule 49    variable_assignation -> array_assign
Rule 50    assignation -> ASSIGN
Rule 51    assignation -> PLUSASSIGN
Rule 52    assignation -> MINUSASSIGN
Rule 53    assignation -> TIMESASSIGN
Rule 54    assignation -> DIVIDEASSIGN
Rule 55    assignation -> MODASSIGN
Rule 56    parameters -> VARIABLE type
Rule 57    parameters -> VARIABLE type COMMA parameters
Rule 58    type -> INT
Rule 59    type -> INT32
Rule 60    type -> INT64
Rule 61    type -> STRING
Rule 62    type -> FLOAT
Rule 63    type -> FLOAT32
Rule 64    type -> FLOAT64
Rule 65    type -> BOOL
Rule 66    function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
Rule 67    function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
Rule 68    function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
Rule 69    function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
Rule 70    function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
Rule 71    function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
Rule 72    function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
Rule 73    function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
Rule 74    return -> RETURN value
Rule 75    return -> RETURN value LBRACKET value RBRACKET
Rule 76    return -> RETURN value PERIOD value
Rule 77    print_statement -> PRINT LPAREN values RPAREN
Rule 78    print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN
Rule 79    print_statement -> PRINT LPAREN operation RPAREN
Rule 80    print_statement -> PRINT LPAREN RPAREN
Rule 81    input_statement -> INPUT LPAREN values RPAREN
Rule 82    input_statement -> INPUT LPAREN operation RPAREN
Rule 83    input_statement -> INPUT LPAREN RPAREN
Rule 84    operation -> value operator value
Rule 85    operation -> value operator LPAREN value RPAREN
Rule 86    operation -> LPAREN value RPAREN operator value
Rule 87    operation -> LPAREN value operator value RPAREN
Rule 88    operation -> value operator operation
Rule 89    operation -> LPAREN value operator operation RPAREN
Rule 90    operation -> LPAREN value RPAREN operator operation
Rule 91    operation -> value operator LPAREN operation RPAREN
Rule 92    operation -> value double_operator
Rule 93    operator -> PLUS
Rule 94    operator -> MINUS
Rule 95    operator -> TIMES
Rule 96    operator -> DIVIDE
Rule 97    operator -> ASSIGN
Rule 98    double_operator -> INCREMENT
Rule 99    double_operator -> DECREMENT
Rule 100   control_structure -> conditional_structure
Rule 101   control_structure -> for_estructure
Rule 102   control_structure -> switch_structure
Rule 103   conditional_structure -> IF conditions conditional_body
Rule 104   conditional_structure -> IF conditions conditional_body ELSE conditional_body
Rule 105   conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
Rule 106   conditional_body -> LBRACE statement RBRACE
Rule 107   conditional_body -> LBRACE statement return RBRACE
Rule 108   conditional_body -> LBRACE return RBRACE
Rule 109   conditional_body -> LBRACE BREAK RBRACE
Rule 110   conditional_body -> LBRACE CONTINUE RBRACE
Rule 111   conditions -> condition
Rule 112   conditions -> condition logical_operator conditions
Rule 113   condition -> value relational_operator value
Rule 114   logical_operator -> AND
Rule 115   logical_operator -> OR
Rule 116   logical_operator -> NOT
Rule 117   relational_operator -> GREATER
Rule 118   relational_operator -> LESS
Rule 119   relational_operator -> GREATEREQUALS
Rule 120   relational_operator -> LESSEQUALS
Rule 121   relational_operator -> EQUALS
Rule 122   relational_operator -> DIFFERENT
Rule 123   for_estructure -> for_initialization
Rule 124   for_estructure -> for_infinite_bucle
Rule 125   for_estructure -> for_iterator
Rule 126   for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
Rule 127   for_infinite_bucle -> FOR LBRACE statement RBRACE
Rule 128   for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE
Rule 129   switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE
Rule 130   switch_expression -> VARIABLE SHORTASSIGN value
Rule 131   switch_expression -> empty
Rule 132   case_blocks -> case_block
Rule 133   case_blocks -> case_block case_blocks
Rule 134   case_block -> CASE values COLON statement
Rule 135   case_block -> DEFAULT COLON statement
Rule 136   empty -> <empty>
Rule 137   data_structure -> array_structure
Rule 138   data_structure -> map_structure
Rule 139   data_structure -> slice_structure
Rule 140   data_structure -> struct_structure
Rule 141   struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 142   struct_fields -> struct_field
Rule 143   struct_fields -> struct_field struct_fields
Rule 144   struct_field -> VARIABLE type
Rule 145   array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type
Rule 146   array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
Rule 147   array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
Rule 148   array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value
Rule 149   map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
Rule 150   map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 151   map_values -> map_value
Rule 152   map_values -> map_value COMMA map_values
Rule 153   map_value -> value COLON value
Rule 154   map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value
Rule 155   slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
Rule 156   slice_structure -> VAR VARIABLE LBRACKET RBRACKET type
Rule 157   slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type
Rule 158   slice_structure -> VARIABLE ASSIGN append_statement
Rule 159   append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN
Rule 160   append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN

Terminals, with rules where they appear

AND                  : 114
APPEND               : 159 160
ASSIGN               : 40 41 44 50 97 146 147 148 154 158
BOOL                 : 65
BREAK                : 109
CASE                 : 134
CHARSTRING           : 10 12 13 34
COLON                : 134 135 153
COMMA                : 29 38 57 78 128 152 159 160
CONST                : 44
CONTINUE             : 110
DECREMENT            : 99
DEFAULT              : 135
DIFFERENT            : 122
DIVIDE               : 96
DIVIDEASSIGN         : 54
ELSE                 : 104 105 105
EQUALS               : 121
FLOAT                : 36 62
FLOAT32              : 63
FLOAT64              : 64
FOR                  : 126 127 128
FORMATSTRING         : 78
FUNCTION             : 16 66 67 68 69 70 71 72 73
GREATER              : 117
GREATEREQUALS        : 119
IF                   : 103 104 105 105
IMPORT               : 10 11
INCREMENT            : 98
INPUT                : 81 82 83
INT                  : 35 58 145 146 147 148
INT32                : 59
INT64                : 60
LBRACE               : 5 6 7 8 66 67 68 69 70 71 72 73 106 107 108 109 110 126 127 128 129 141 146 149 155 160
LBRACKET             : 31 32 75 145 146 147 147 148 149 150 154 155 156 157 160
LESS                 : 118
LESSEQUALS           : 120
LPAREN               : 11 16 66 67 68 69 70 71 72 73 77 78 79 80 81 82 83 85 86 87 89 90 91 150 159 160
MAIN                 : 15 16
MAKE                 : 150
MAP                  : 149 150
MINUS                : 94
MINUSASSIGN          : 52
MODASSIGN            : 55
NOT                  : 116
OR                   : 115
PACKAGE              : 14 15
PERIOD               : 76
PLUS                 : 93
PLUSASSIGN           : 51
PRINT                : 77 79 80
PRINTF               : 78
RANGE                : 128
RBRACE               : 5 6 7 8 66 67 68 69 70 71 72 73 106 107 108 109 110 126 127 128 129 141 146 149 155 160
RBRACKET             : 31 32 75 145 146 147 147 148 149 150 154 155 156 157 160
RETURN               : 74 75 76
RPAREN               : 11 16 66 67 68 69 70 71 72 73 77 78 79 80 81 82 83 85 86 87 89 90 91 150 159 160
SEMICOLON            : 19 126 126
SHORTASSIGN          : 42 43 126 128 130 149 150 155 157
STRING               : 61
STRUCT               : 141
SWITCH               : 129
TIMES                : 95
TIMESASSIGN          : 53
TYPE                 : 141
VAR                  : 39 40 41 145 146 147 156
VARIABLE             : 14 28 29 30 31 32 42 43 44 45 46 47 56 57 66 67 68 69 70 71 72 73 126 128 128 128 130 141 144 145 146 147 148 149 150 154 155 156 157 158 159 160
error                : 

Nonterminals, with rules where they appear

append_statement     : 158
array_assign         : 49
array_structure      : 137
assignation          : 45 46
block                : 17 18 19
blocks               : 1 2 3 4 5 6 7 8 18 19 66 68 70 72
case_block           : 132 133
case_blocks          : 129 133
condition            : 111 112 126
conditional_body     : 103 104 104 105 105 105
conditional_structure : 100
conditions           : 103 104 105 105 112
control_structure    : 24
data_structure       : 23
double_operator      : 47 92 126
empty                : 131
for_estructure       : 101
for_infinite_bucle   : 124
for_initialization   : 123
for_iterator         : 125
function             : 25
import               : 2 4 7 8
input_statement      : 21
logical_operator     : 112
main                 : 5 6 7 8
map_assign           : 48
map_structure        : 138
map_value            : 151 152
map_values           : 149 152
not_variable_value   : 33
operation            : 22 41 43 46 79 82 88 89 90 91
operator             : 84 85 86 87 88 89 90 91
package              : 3 4 6 8
parameters           : 57 70 71 72 73
print_statement      : 20
relational_operator  : 113
return               : 68 69 72 73 107 108
slice_structure      : 139
statement            : 106 107 126 127 128 134 135 0
struct_field         : 142 143
struct_fields        : 141 143
struct_structure     : 140
switch_expression    : 129
switch_structure     : 102
type                 : 39 40 41 56 57 68 69 72 73 144 145 146 147 149 149 150 150 155 156 157 160
value                : 32 37 38 40 42 44 45 74 75 75 76 76 84 84 85 85 86 86 87 87 88 89 90 91 92 113 113 126 126 130 148 153 153 154 154
values               : 38 77 78 81 134 146 147 155 159 160
values_for_import    : 11 13
variable_assignation : 27
variable_declaration : 26
variables            : 29 39 40 41

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 1
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 1

    (0) S' -> statement .



state 2

    (1) statement -> blocks .

    $end            reduce using rule 1 (statement -> blocks .)
    RBRACE          reduce using rule 1 (statement -> blocks .)
    RETURN          reduce using rule 1 (statement -> blocks .)
    CASE            reduce using rule 1 (statement -> blocks .)
    DEFAULT         reduce using rule 1 (statement -> blocks .)


state 3

    (2) statement -> import . blocks
    (7) statement -> import . main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 46
    main                           shift and go to state 47
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 4

    (3) statement -> package . blocks
    (4) statement -> package . import blocks
    (6) statement -> package . main LBRACE blocks RBRACE
    (8) statement -> package . import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    blocks                         shift and go to state 48
    import                         shift and go to state 49
    main                           shift and go to state 50
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 5

    (5) statement -> main . LBRACE blocks RBRACE

    LBRACE          shift and go to state 51


state 6

    (17) blocks -> block .
    (18) blocks -> block . blocks
    (19) blocks -> block . SEMICOLON blocks
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    $end            reduce using rule 17 (blocks -> block .)
    RBRACE          reduce using rule 17 (blocks -> block .)
    RETURN          reduce using rule 17 (blocks -> block .)
    CASE            reduce using rule 17 (blocks -> block .)
    DEFAULT         reduce using rule 17 (blocks -> block .)
    SEMICOLON       shift and go to state 53
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    block                          shift and go to state 6
    blocks                         shift and go to state 52
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 7

    (10) import -> IMPORT . CHARSTRING
    (11) import -> IMPORT . LPAREN values_for_import RPAREN

    CHARSTRING      shift and go to state 55
    LPAREN          shift and go to state 56


state 8

    (34) not_variable_value -> CHARSTRING .

    PLUS            reduce using rule 34 (not_variable_value -> CHARSTRING .)
    MINUS           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    TIMES           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    DIVIDE          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    ASSIGN          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    INCREMENT       reduce using rule 34 (not_variable_value -> CHARSTRING .)
    DECREMENT       reduce using rule 34 (not_variable_value -> CHARSTRING .)
    RPAREN          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    GREATER         reduce using rule 34 (not_variable_value -> CHARSTRING .)
    LESS            reduce using rule 34 (not_variable_value -> CHARSTRING .)
    GREATEREQUALS   reduce using rule 34 (not_variable_value -> CHARSTRING .)
    LESSEQUALS      reduce using rule 34 (not_variable_value -> CHARSTRING .)
    EQUALS          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    DIFFERENT       reduce using rule 34 (not_variable_value -> CHARSTRING .)
    SEMICOLON       reduce using rule 34 (not_variable_value -> CHARSTRING .)
    PRINT           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    PRINTF          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    INPUT           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    LPAREN          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    FUNCTION        reduce using rule 34 (not_variable_value -> CHARSTRING .)
    VAR             reduce using rule 34 (not_variable_value -> CHARSTRING .)
    VARIABLE        reduce using rule 34 (not_variable_value -> CHARSTRING .)
    CONST           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    TYPE            reduce using rule 34 (not_variable_value -> CHARSTRING .)
    IF              reduce using rule 34 (not_variable_value -> CHARSTRING .)
    SWITCH          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    CHARSTRING      reduce using rule 34 (not_variable_value -> CHARSTRING .)
    INT             reduce using rule 34 (not_variable_value -> CHARSTRING .)
    FLOAT           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    FOR             reduce using rule 34 (not_variable_value -> CHARSTRING .)
    $end            reduce using rule 34 (not_variable_value -> CHARSTRING .)
    RBRACE          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    RETURN          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    CASE            reduce using rule 34 (not_variable_value -> CHARSTRING .)
    DEFAULT         reduce using rule 34 (not_variable_value -> CHARSTRING .)
    RBRACKET        reduce using rule 34 (not_variable_value -> CHARSTRING .)
    COMMA           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    AND             reduce using rule 34 (not_variable_value -> CHARSTRING .)
    OR              reduce using rule 34 (not_variable_value -> CHARSTRING .)
    NOT             reduce using rule 34 (not_variable_value -> CHARSTRING .)
    LBRACE          reduce using rule 34 (not_variable_value -> CHARSTRING .)
    COLON           reduce using rule 34 (not_variable_value -> CHARSTRING .)
    LBRACKET        reduce using rule 34 (not_variable_value -> CHARSTRING .)
    PERIOD          reduce using rule 34 (not_variable_value -> CHARSTRING .)


state 9

    (86) operation -> LPAREN . value RPAREN operator value
    (87) operation -> LPAREN . value operator value RPAREN
    (89) operation -> LPAREN . value operator operation RPAREN
    (90) operation -> LPAREN . value RPAREN operator operation
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 57
    not_variable_value             shift and go to state 36

state 10

    (14) package -> PACKAGE . VARIABLE
    (15) package -> PACKAGE . MAIN

    VARIABLE        shift and go to state 59
    MAIN            shift and go to state 60


state 11

    (42) variable_declaration -> VARIABLE . SHORTASSIGN value
    (43) variable_declaration -> VARIABLE . SHORTASSIGN operation
    (45) variable_assignation -> VARIABLE . assignation value
    (46) variable_assignation -> VARIABLE . assignation operation
    (47) variable_assignation -> VARIABLE . double_operator
    (30) value -> VARIABLE .
    (31) value -> VARIABLE . LBRACKET RBRACKET
    (32) value -> VARIABLE . LBRACKET value RBRACKET
    (149) map_structure -> VARIABLE . SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> VARIABLE . SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> VARIABLE . SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (157) slice_structure -> VARIABLE . SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> VARIABLE . ASSIGN append_statement
    (154) map_assign -> VARIABLE . LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> VARIABLE . LBRACKET INT RBRACKET ASSIGN value
    (50) assignation -> . ASSIGN
    (51) assignation -> . PLUSASSIGN
    (52) assignation -> . MINUSASSIGN
    (53) assignation -> . TIMESASSIGN
    (54) assignation -> . DIVIDEASSIGN
    (55) assignation -> . MODASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    SHORTASSIGN     shift and go to state 61
    PLUS            reduce using rule 30 (value -> VARIABLE .)
    MINUS           reduce using rule 30 (value -> VARIABLE .)
    TIMES           reduce using rule 30 (value -> VARIABLE .)
    DIVIDE          reduce using rule 30 (value -> VARIABLE .)
    LBRACKET        shift and go to state 64
    ASSIGN          shift and go to state 65
    PLUSASSIGN      shift and go to state 66
    MINUSASSIGN     shift and go to state 67
    TIMESASSIGN     shift and go to state 68
    DIVIDEASSIGN    shift and go to state 69
    MODASSIGN       shift and go to state 70
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

  ! ASSIGN          [ reduce using rule 30 (value -> VARIABLE .) ]
  ! INCREMENT       [ reduce using rule 30 (value -> VARIABLE .) ]
  ! DECREMENT       [ reduce using rule 30 (value -> VARIABLE .) ]

    assignation                    shift and go to state 62
    double_operator                shift and go to state 63

state 12

    (16) main -> FUNCTION . MAIN LPAREN RPAREN
    (66) function -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> FUNCTION . VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> FUNCTION . VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE

    MAIN            shift and go to state 73
    VARIABLE        shift and go to state 74


state 13

    (20) block -> print_statement .

    SEMICOLON       reduce using rule 20 (block -> print_statement .)
    PRINT           reduce using rule 20 (block -> print_statement .)
    PRINTF          reduce using rule 20 (block -> print_statement .)
    INPUT           reduce using rule 20 (block -> print_statement .)
    LPAREN          reduce using rule 20 (block -> print_statement .)
    FUNCTION        reduce using rule 20 (block -> print_statement .)
    VAR             reduce using rule 20 (block -> print_statement .)
    VARIABLE        reduce using rule 20 (block -> print_statement .)
    CONST           reduce using rule 20 (block -> print_statement .)
    TYPE            reduce using rule 20 (block -> print_statement .)
    IF              reduce using rule 20 (block -> print_statement .)
    SWITCH          reduce using rule 20 (block -> print_statement .)
    CHARSTRING      reduce using rule 20 (block -> print_statement .)
    INT             reduce using rule 20 (block -> print_statement .)
    FLOAT           reduce using rule 20 (block -> print_statement .)
    FOR             reduce using rule 20 (block -> print_statement .)
    $end            reduce using rule 20 (block -> print_statement .)
    RBRACE          reduce using rule 20 (block -> print_statement .)
    RETURN          reduce using rule 20 (block -> print_statement .)
    CASE            reduce using rule 20 (block -> print_statement .)
    DEFAULT         reduce using rule 20 (block -> print_statement .)


state 14

    (21) block -> input_statement .

    SEMICOLON       reduce using rule 21 (block -> input_statement .)
    PRINT           reduce using rule 21 (block -> input_statement .)
    PRINTF          reduce using rule 21 (block -> input_statement .)
    INPUT           reduce using rule 21 (block -> input_statement .)
    LPAREN          reduce using rule 21 (block -> input_statement .)
    FUNCTION        reduce using rule 21 (block -> input_statement .)
    VAR             reduce using rule 21 (block -> input_statement .)
    VARIABLE        reduce using rule 21 (block -> input_statement .)
    CONST           reduce using rule 21 (block -> input_statement .)
    TYPE            reduce using rule 21 (block -> input_statement .)
    IF              reduce using rule 21 (block -> input_statement .)
    SWITCH          reduce using rule 21 (block -> input_statement .)
    CHARSTRING      reduce using rule 21 (block -> input_statement .)
    INT             reduce using rule 21 (block -> input_statement .)
    FLOAT           reduce using rule 21 (block -> input_statement .)
    FOR             reduce using rule 21 (block -> input_statement .)
    $end            reduce using rule 21 (block -> input_statement .)
    RBRACE          reduce using rule 21 (block -> input_statement .)
    RETURN          reduce using rule 21 (block -> input_statement .)
    CASE            reduce using rule 21 (block -> input_statement .)
    DEFAULT         reduce using rule 21 (block -> input_statement .)


state 15

    (22) block -> operation .

    SEMICOLON       reduce using rule 22 (block -> operation .)
    PRINT           reduce using rule 22 (block -> operation .)
    PRINTF          reduce using rule 22 (block -> operation .)
    INPUT           reduce using rule 22 (block -> operation .)
    LPAREN          reduce using rule 22 (block -> operation .)
    FUNCTION        reduce using rule 22 (block -> operation .)
    VAR             reduce using rule 22 (block -> operation .)
    VARIABLE        reduce using rule 22 (block -> operation .)
    CONST           reduce using rule 22 (block -> operation .)
    TYPE            reduce using rule 22 (block -> operation .)
    IF              reduce using rule 22 (block -> operation .)
    SWITCH          reduce using rule 22 (block -> operation .)
    CHARSTRING      reduce using rule 22 (block -> operation .)
    INT             reduce using rule 22 (block -> operation .)
    FLOAT           reduce using rule 22 (block -> operation .)
    FOR             reduce using rule 22 (block -> operation .)
    $end            reduce using rule 22 (block -> operation .)
    RBRACE          reduce using rule 22 (block -> operation .)
    RETURN          reduce using rule 22 (block -> operation .)
    CASE            reduce using rule 22 (block -> operation .)
    DEFAULT         reduce using rule 22 (block -> operation .)


state 16

    (23) block -> data_structure .

    SEMICOLON       reduce using rule 23 (block -> data_structure .)
    PRINT           reduce using rule 23 (block -> data_structure .)
    PRINTF          reduce using rule 23 (block -> data_structure .)
    INPUT           reduce using rule 23 (block -> data_structure .)
    LPAREN          reduce using rule 23 (block -> data_structure .)
    FUNCTION        reduce using rule 23 (block -> data_structure .)
    VAR             reduce using rule 23 (block -> data_structure .)
    VARIABLE        reduce using rule 23 (block -> data_structure .)
    CONST           reduce using rule 23 (block -> data_structure .)
    TYPE            reduce using rule 23 (block -> data_structure .)
    IF              reduce using rule 23 (block -> data_structure .)
    SWITCH          reduce using rule 23 (block -> data_structure .)
    CHARSTRING      reduce using rule 23 (block -> data_structure .)
    INT             reduce using rule 23 (block -> data_structure .)
    FLOAT           reduce using rule 23 (block -> data_structure .)
    FOR             reduce using rule 23 (block -> data_structure .)
    $end            reduce using rule 23 (block -> data_structure .)
    RBRACE          reduce using rule 23 (block -> data_structure .)
    RETURN          reduce using rule 23 (block -> data_structure .)
    CASE            reduce using rule 23 (block -> data_structure .)
    DEFAULT         reduce using rule 23 (block -> data_structure .)


state 17

    (24) block -> control_structure .

    SEMICOLON       reduce using rule 24 (block -> control_structure .)
    PRINT           reduce using rule 24 (block -> control_structure .)
    PRINTF          reduce using rule 24 (block -> control_structure .)
    INPUT           reduce using rule 24 (block -> control_structure .)
    LPAREN          reduce using rule 24 (block -> control_structure .)
    FUNCTION        reduce using rule 24 (block -> control_structure .)
    VAR             reduce using rule 24 (block -> control_structure .)
    VARIABLE        reduce using rule 24 (block -> control_structure .)
    CONST           reduce using rule 24 (block -> control_structure .)
    TYPE            reduce using rule 24 (block -> control_structure .)
    IF              reduce using rule 24 (block -> control_structure .)
    SWITCH          reduce using rule 24 (block -> control_structure .)
    CHARSTRING      reduce using rule 24 (block -> control_structure .)
    INT             reduce using rule 24 (block -> control_structure .)
    FLOAT           reduce using rule 24 (block -> control_structure .)
    FOR             reduce using rule 24 (block -> control_structure .)
    $end            reduce using rule 24 (block -> control_structure .)
    RBRACE          reduce using rule 24 (block -> control_structure .)
    RETURN          reduce using rule 24 (block -> control_structure .)
    CASE            reduce using rule 24 (block -> control_structure .)
    DEFAULT         reduce using rule 24 (block -> control_structure .)


state 18

    (25) block -> function .

    SEMICOLON       reduce using rule 25 (block -> function .)
    PRINT           reduce using rule 25 (block -> function .)
    PRINTF          reduce using rule 25 (block -> function .)
    INPUT           reduce using rule 25 (block -> function .)
    LPAREN          reduce using rule 25 (block -> function .)
    FUNCTION        reduce using rule 25 (block -> function .)
    VAR             reduce using rule 25 (block -> function .)
    VARIABLE        reduce using rule 25 (block -> function .)
    CONST           reduce using rule 25 (block -> function .)
    TYPE            reduce using rule 25 (block -> function .)
    IF              reduce using rule 25 (block -> function .)
    SWITCH          reduce using rule 25 (block -> function .)
    CHARSTRING      reduce using rule 25 (block -> function .)
    INT             reduce using rule 25 (block -> function .)
    FLOAT           reduce using rule 25 (block -> function .)
    FOR             reduce using rule 25 (block -> function .)
    $end            reduce using rule 25 (block -> function .)
    RBRACE          reduce using rule 25 (block -> function .)
    RETURN          reduce using rule 25 (block -> function .)
    CASE            reduce using rule 25 (block -> function .)
    DEFAULT         reduce using rule 25 (block -> function .)


state 19

    (26) block -> variable_declaration .

    SEMICOLON       reduce using rule 26 (block -> variable_declaration .)
    PRINT           reduce using rule 26 (block -> variable_declaration .)
    PRINTF          reduce using rule 26 (block -> variable_declaration .)
    INPUT           reduce using rule 26 (block -> variable_declaration .)
    LPAREN          reduce using rule 26 (block -> variable_declaration .)
    FUNCTION        reduce using rule 26 (block -> variable_declaration .)
    VAR             reduce using rule 26 (block -> variable_declaration .)
    VARIABLE        reduce using rule 26 (block -> variable_declaration .)
    CONST           reduce using rule 26 (block -> variable_declaration .)
    TYPE            reduce using rule 26 (block -> variable_declaration .)
    IF              reduce using rule 26 (block -> variable_declaration .)
    SWITCH          reduce using rule 26 (block -> variable_declaration .)
    CHARSTRING      reduce using rule 26 (block -> variable_declaration .)
    INT             reduce using rule 26 (block -> variable_declaration .)
    FLOAT           reduce using rule 26 (block -> variable_declaration .)
    FOR             reduce using rule 26 (block -> variable_declaration .)
    $end            reduce using rule 26 (block -> variable_declaration .)
    RBRACE          reduce using rule 26 (block -> variable_declaration .)
    RETURN          reduce using rule 26 (block -> variable_declaration .)
    CASE            reduce using rule 26 (block -> variable_declaration .)
    DEFAULT         reduce using rule 26 (block -> variable_declaration .)


state 20

    (27) block -> variable_assignation .

    SEMICOLON       reduce using rule 27 (block -> variable_assignation .)
    PRINT           reduce using rule 27 (block -> variable_assignation .)
    PRINTF          reduce using rule 27 (block -> variable_assignation .)
    INPUT           reduce using rule 27 (block -> variable_assignation .)
    LPAREN          reduce using rule 27 (block -> variable_assignation .)
    FUNCTION        reduce using rule 27 (block -> variable_assignation .)
    VAR             reduce using rule 27 (block -> variable_assignation .)
    VARIABLE        reduce using rule 27 (block -> variable_assignation .)
    CONST           reduce using rule 27 (block -> variable_assignation .)
    TYPE            reduce using rule 27 (block -> variable_assignation .)
    IF              reduce using rule 27 (block -> variable_assignation .)
    SWITCH          reduce using rule 27 (block -> variable_assignation .)
    CHARSTRING      reduce using rule 27 (block -> variable_assignation .)
    INT             reduce using rule 27 (block -> variable_assignation .)
    FLOAT           reduce using rule 27 (block -> variable_assignation .)
    FOR             reduce using rule 27 (block -> variable_assignation .)
    $end            reduce using rule 27 (block -> variable_assignation .)
    RBRACE          reduce using rule 27 (block -> variable_assignation .)
    RETURN          reduce using rule 27 (block -> variable_assignation .)
    CASE            reduce using rule 27 (block -> variable_assignation .)
    DEFAULT         reduce using rule 27 (block -> variable_assignation .)


state 21

    (77) print_statement -> PRINT . LPAREN values RPAREN
    (79) print_statement -> PRINT . LPAREN operation RPAREN
    (80) print_statement -> PRINT . LPAREN RPAREN

    LPAREN          shift and go to state 75


state 22

    (78) print_statement -> PRINTF . LPAREN FORMATSTRING COMMA values RPAREN

    LPAREN          shift and go to state 76


state 23

    (81) input_statement -> INPUT . LPAREN values RPAREN
    (82) input_statement -> INPUT . LPAREN operation RPAREN
    (83) input_statement -> INPUT . LPAREN RPAREN

    LPAREN          shift and go to state 77


state 24

    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 25

    (137) data_structure -> array_structure .

    SEMICOLON       reduce using rule 137 (data_structure -> array_structure .)
    PRINT           reduce using rule 137 (data_structure -> array_structure .)
    PRINTF          reduce using rule 137 (data_structure -> array_structure .)
    INPUT           reduce using rule 137 (data_structure -> array_structure .)
    LPAREN          reduce using rule 137 (data_structure -> array_structure .)
    FUNCTION        reduce using rule 137 (data_structure -> array_structure .)
    VAR             reduce using rule 137 (data_structure -> array_structure .)
    VARIABLE        reduce using rule 137 (data_structure -> array_structure .)
    CONST           reduce using rule 137 (data_structure -> array_structure .)
    TYPE            reduce using rule 137 (data_structure -> array_structure .)
    IF              reduce using rule 137 (data_structure -> array_structure .)
    SWITCH          reduce using rule 137 (data_structure -> array_structure .)
    CHARSTRING      reduce using rule 137 (data_structure -> array_structure .)
    INT             reduce using rule 137 (data_structure -> array_structure .)
    FLOAT           reduce using rule 137 (data_structure -> array_structure .)
    FOR             reduce using rule 137 (data_structure -> array_structure .)
    $end            reduce using rule 137 (data_structure -> array_structure .)
    RBRACE          reduce using rule 137 (data_structure -> array_structure .)
    RETURN          reduce using rule 137 (data_structure -> array_structure .)
    CASE            reduce using rule 137 (data_structure -> array_structure .)
    DEFAULT         reduce using rule 137 (data_structure -> array_structure .)


state 26

    (138) data_structure -> map_structure .

    SEMICOLON       reduce using rule 138 (data_structure -> map_structure .)
    PRINT           reduce using rule 138 (data_structure -> map_structure .)
    PRINTF          reduce using rule 138 (data_structure -> map_structure .)
    INPUT           reduce using rule 138 (data_structure -> map_structure .)
    LPAREN          reduce using rule 138 (data_structure -> map_structure .)
    FUNCTION        reduce using rule 138 (data_structure -> map_structure .)
    VAR             reduce using rule 138 (data_structure -> map_structure .)
    VARIABLE        reduce using rule 138 (data_structure -> map_structure .)
    CONST           reduce using rule 138 (data_structure -> map_structure .)
    TYPE            reduce using rule 138 (data_structure -> map_structure .)
    IF              reduce using rule 138 (data_structure -> map_structure .)
    SWITCH          reduce using rule 138 (data_structure -> map_structure .)
    CHARSTRING      reduce using rule 138 (data_structure -> map_structure .)
    INT             reduce using rule 138 (data_structure -> map_structure .)
    FLOAT           reduce using rule 138 (data_structure -> map_structure .)
    FOR             reduce using rule 138 (data_structure -> map_structure .)
    $end            reduce using rule 138 (data_structure -> map_structure .)
    RBRACE          reduce using rule 138 (data_structure -> map_structure .)
    RETURN          reduce using rule 138 (data_structure -> map_structure .)
    CASE            reduce using rule 138 (data_structure -> map_structure .)
    DEFAULT         reduce using rule 138 (data_structure -> map_structure .)


state 27

    (139) data_structure -> slice_structure .

    SEMICOLON       reduce using rule 139 (data_structure -> slice_structure .)
    PRINT           reduce using rule 139 (data_structure -> slice_structure .)
    PRINTF          reduce using rule 139 (data_structure -> slice_structure .)
    INPUT           reduce using rule 139 (data_structure -> slice_structure .)
    LPAREN          reduce using rule 139 (data_structure -> slice_structure .)
    FUNCTION        reduce using rule 139 (data_structure -> slice_structure .)
    VAR             reduce using rule 139 (data_structure -> slice_structure .)
    VARIABLE        reduce using rule 139 (data_structure -> slice_structure .)
    CONST           reduce using rule 139 (data_structure -> slice_structure .)
    TYPE            reduce using rule 139 (data_structure -> slice_structure .)
    IF              reduce using rule 139 (data_structure -> slice_structure .)
    SWITCH          reduce using rule 139 (data_structure -> slice_structure .)
    CHARSTRING      reduce using rule 139 (data_structure -> slice_structure .)
    INT             reduce using rule 139 (data_structure -> slice_structure .)
    FLOAT           reduce using rule 139 (data_structure -> slice_structure .)
    FOR             reduce using rule 139 (data_structure -> slice_structure .)
    $end            reduce using rule 139 (data_structure -> slice_structure .)
    RBRACE          reduce using rule 139 (data_structure -> slice_structure .)
    RETURN          reduce using rule 139 (data_structure -> slice_structure .)
    CASE            reduce using rule 139 (data_structure -> slice_structure .)
    DEFAULT         reduce using rule 139 (data_structure -> slice_structure .)


state 28

    (140) data_structure -> struct_structure .

    SEMICOLON       reduce using rule 140 (data_structure -> struct_structure .)
    PRINT           reduce using rule 140 (data_structure -> struct_structure .)
    PRINTF          reduce using rule 140 (data_structure -> struct_structure .)
    INPUT           reduce using rule 140 (data_structure -> struct_structure .)
    LPAREN          reduce using rule 140 (data_structure -> struct_structure .)
    FUNCTION        reduce using rule 140 (data_structure -> struct_structure .)
    VAR             reduce using rule 140 (data_structure -> struct_structure .)
    VARIABLE        reduce using rule 140 (data_structure -> struct_structure .)
    CONST           reduce using rule 140 (data_structure -> struct_structure .)
    TYPE            reduce using rule 140 (data_structure -> struct_structure .)
    IF              reduce using rule 140 (data_structure -> struct_structure .)
    SWITCH          reduce using rule 140 (data_structure -> struct_structure .)
    CHARSTRING      reduce using rule 140 (data_structure -> struct_structure .)
    INT             reduce using rule 140 (data_structure -> struct_structure .)
    FLOAT           reduce using rule 140 (data_structure -> struct_structure .)
    FOR             reduce using rule 140 (data_structure -> struct_structure .)
    $end            reduce using rule 140 (data_structure -> struct_structure .)
    RBRACE          reduce using rule 140 (data_structure -> struct_structure .)
    RETURN          reduce using rule 140 (data_structure -> struct_structure .)
    CASE            reduce using rule 140 (data_structure -> struct_structure .)
    DEFAULT         reduce using rule 140 (data_structure -> struct_structure .)


state 29

    (100) control_structure -> conditional_structure .

    SEMICOLON       reduce using rule 100 (control_structure -> conditional_structure .)
    PRINT           reduce using rule 100 (control_structure -> conditional_structure .)
    PRINTF          reduce using rule 100 (control_structure -> conditional_structure .)
    INPUT           reduce using rule 100 (control_structure -> conditional_structure .)
    LPAREN          reduce using rule 100 (control_structure -> conditional_structure .)
    FUNCTION        reduce using rule 100 (control_structure -> conditional_structure .)
    VAR             reduce using rule 100 (control_structure -> conditional_structure .)
    VARIABLE        reduce using rule 100 (control_structure -> conditional_structure .)
    CONST           reduce using rule 100 (control_structure -> conditional_structure .)
    TYPE            reduce using rule 100 (control_structure -> conditional_structure .)
    IF              reduce using rule 100 (control_structure -> conditional_structure .)
    SWITCH          reduce using rule 100 (control_structure -> conditional_structure .)
    CHARSTRING      reduce using rule 100 (control_structure -> conditional_structure .)
    INT             reduce using rule 100 (control_structure -> conditional_structure .)
    FLOAT           reduce using rule 100 (control_structure -> conditional_structure .)
    FOR             reduce using rule 100 (control_structure -> conditional_structure .)
    $end            reduce using rule 100 (control_structure -> conditional_structure .)
    RBRACE          reduce using rule 100 (control_structure -> conditional_structure .)
    RETURN          reduce using rule 100 (control_structure -> conditional_structure .)
    CASE            reduce using rule 100 (control_structure -> conditional_structure .)
    DEFAULT         reduce using rule 100 (control_structure -> conditional_structure .)


state 30

    (101) control_structure -> for_estructure .

    SEMICOLON       reduce using rule 101 (control_structure -> for_estructure .)
    PRINT           reduce using rule 101 (control_structure -> for_estructure .)
    PRINTF          reduce using rule 101 (control_structure -> for_estructure .)
    INPUT           reduce using rule 101 (control_structure -> for_estructure .)
    LPAREN          reduce using rule 101 (control_structure -> for_estructure .)
    FUNCTION        reduce using rule 101 (control_structure -> for_estructure .)
    VAR             reduce using rule 101 (control_structure -> for_estructure .)
    VARIABLE        reduce using rule 101 (control_structure -> for_estructure .)
    CONST           reduce using rule 101 (control_structure -> for_estructure .)
    TYPE            reduce using rule 101 (control_structure -> for_estructure .)
    IF              reduce using rule 101 (control_structure -> for_estructure .)
    SWITCH          reduce using rule 101 (control_structure -> for_estructure .)
    CHARSTRING      reduce using rule 101 (control_structure -> for_estructure .)
    INT             reduce using rule 101 (control_structure -> for_estructure .)
    FLOAT           reduce using rule 101 (control_structure -> for_estructure .)
    FOR             reduce using rule 101 (control_structure -> for_estructure .)
    $end            reduce using rule 101 (control_structure -> for_estructure .)
    RBRACE          reduce using rule 101 (control_structure -> for_estructure .)
    RETURN          reduce using rule 101 (control_structure -> for_estructure .)
    CASE            reduce using rule 101 (control_structure -> for_estructure .)
    DEFAULT         reduce using rule 101 (control_structure -> for_estructure .)


state 31

    (102) control_structure -> switch_structure .

    SEMICOLON       reduce using rule 102 (control_structure -> switch_structure .)
    PRINT           reduce using rule 102 (control_structure -> switch_structure .)
    PRINTF          reduce using rule 102 (control_structure -> switch_structure .)
    INPUT           reduce using rule 102 (control_structure -> switch_structure .)
    LPAREN          reduce using rule 102 (control_structure -> switch_structure .)
    FUNCTION        reduce using rule 102 (control_structure -> switch_structure .)
    VAR             reduce using rule 102 (control_structure -> switch_structure .)
    VARIABLE        reduce using rule 102 (control_structure -> switch_structure .)
    CONST           reduce using rule 102 (control_structure -> switch_structure .)
    TYPE            reduce using rule 102 (control_structure -> switch_structure .)
    IF              reduce using rule 102 (control_structure -> switch_structure .)
    SWITCH          reduce using rule 102 (control_structure -> switch_structure .)
    CHARSTRING      reduce using rule 102 (control_structure -> switch_structure .)
    INT             reduce using rule 102 (control_structure -> switch_structure .)
    FLOAT           reduce using rule 102 (control_structure -> switch_structure .)
    FOR             reduce using rule 102 (control_structure -> switch_structure .)
    $end            reduce using rule 102 (control_structure -> switch_structure .)
    RBRACE          reduce using rule 102 (control_structure -> switch_structure .)
    RETURN          reduce using rule 102 (control_structure -> switch_structure .)
    CASE            reduce using rule 102 (control_structure -> switch_structure .)
    DEFAULT         reduce using rule 102 (control_structure -> switch_structure .)


state 32

    (39) variable_declaration -> VAR . variables type
    (40) variable_declaration -> VAR . variables type ASSIGN value
    (41) variable_declaration -> VAR . variables type ASSIGN operation
    (145) array_structure -> VAR . VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> VAR . VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> VAR . VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (156) slice_structure -> VAR . VARIABLE LBRACKET RBRACKET type
    (28) variables -> . VARIABLE
    (29) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 86

    variables                      shift and go to state 85

state 33

    (44) variable_declaration -> CONST . VARIABLE ASSIGN value

    VARIABLE        shift and go to state 87


state 34

    (48) variable_assignation -> map_assign .

    SEMICOLON       reduce using rule 48 (variable_assignation -> map_assign .)
    PRINT           reduce using rule 48 (variable_assignation -> map_assign .)
    PRINTF          reduce using rule 48 (variable_assignation -> map_assign .)
    INPUT           reduce using rule 48 (variable_assignation -> map_assign .)
    LPAREN          reduce using rule 48 (variable_assignation -> map_assign .)
    FUNCTION        reduce using rule 48 (variable_assignation -> map_assign .)
    VAR             reduce using rule 48 (variable_assignation -> map_assign .)
    VARIABLE        reduce using rule 48 (variable_assignation -> map_assign .)
    CONST           reduce using rule 48 (variable_assignation -> map_assign .)
    TYPE            reduce using rule 48 (variable_assignation -> map_assign .)
    IF              reduce using rule 48 (variable_assignation -> map_assign .)
    SWITCH          reduce using rule 48 (variable_assignation -> map_assign .)
    CHARSTRING      reduce using rule 48 (variable_assignation -> map_assign .)
    INT             reduce using rule 48 (variable_assignation -> map_assign .)
    FLOAT           reduce using rule 48 (variable_assignation -> map_assign .)
    FOR             reduce using rule 48 (variable_assignation -> map_assign .)
    $end            reduce using rule 48 (variable_assignation -> map_assign .)
    RBRACE          reduce using rule 48 (variable_assignation -> map_assign .)
    RETURN          reduce using rule 48 (variable_assignation -> map_assign .)
    CASE            reduce using rule 48 (variable_assignation -> map_assign .)
    DEFAULT         reduce using rule 48 (variable_assignation -> map_assign .)


state 35

    (49) variable_assignation -> array_assign .

    SEMICOLON       reduce using rule 49 (variable_assignation -> array_assign .)
    PRINT           reduce using rule 49 (variable_assignation -> array_assign .)
    PRINTF          reduce using rule 49 (variable_assignation -> array_assign .)
    INPUT           reduce using rule 49 (variable_assignation -> array_assign .)
    LPAREN          reduce using rule 49 (variable_assignation -> array_assign .)
    FUNCTION        reduce using rule 49 (variable_assignation -> array_assign .)
    VAR             reduce using rule 49 (variable_assignation -> array_assign .)
    VARIABLE        reduce using rule 49 (variable_assignation -> array_assign .)
    CONST           reduce using rule 49 (variable_assignation -> array_assign .)
    TYPE            reduce using rule 49 (variable_assignation -> array_assign .)
    IF              reduce using rule 49 (variable_assignation -> array_assign .)
    SWITCH          reduce using rule 49 (variable_assignation -> array_assign .)
    CHARSTRING      reduce using rule 49 (variable_assignation -> array_assign .)
    INT             reduce using rule 49 (variable_assignation -> array_assign .)
    FLOAT           reduce using rule 49 (variable_assignation -> array_assign .)
    FOR             reduce using rule 49 (variable_assignation -> array_assign .)
    $end            reduce using rule 49 (variable_assignation -> array_assign .)
    RBRACE          reduce using rule 49 (variable_assignation -> array_assign .)
    RETURN          reduce using rule 49 (variable_assignation -> array_assign .)
    CASE            reduce using rule 49 (variable_assignation -> array_assign .)
    DEFAULT         reduce using rule 49 (variable_assignation -> array_assign .)


state 36

    (33) value -> not_variable_value .

    PLUS            reduce using rule 33 (value -> not_variable_value .)
    MINUS           reduce using rule 33 (value -> not_variable_value .)
    TIMES           reduce using rule 33 (value -> not_variable_value .)
    DIVIDE          reduce using rule 33 (value -> not_variable_value .)
    ASSIGN          reduce using rule 33 (value -> not_variable_value .)
    INCREMENT       reduce using rule 33 (value -> not_variable_value .)
    DECREMENT       reduce using rule 33 (value -> not_variable_value .)
    RPAREN          reduce using rule 33 (value -> not_variable_value .)
    GREATER         reduce using rule 33 (value -> not_variable_value .)
    LESS            reduce using rule 33 (value -> not_variable_value .)
    GREATEREQUALS   reduce using rule 33 (value -> not_variable_value .)
    LESSEQUALS      reduce using rule 33 (value -> not_variable_value .)
    EQUALS          reduce using rule 33 (value -> not_variable_value .)
    DIFFERENT       reduce using rule 33 (value -> not_variable_value .)
    SEMICOLON       reduce using rule 33 (value -> not_variable_value .)
    PRINT           reduce using rule 33 (value -> not_variable_value .)
    PRINTF          reduce using rule 33 (value -> not_variable_value .)
    INPUT           reduce using rule 33 (value -> not_variable_value .)
    LPAREN          reduce using rule 33 (value -> not_variable_value .)
    FUNCTION        reduce using rule 33 (value -> not_variable_value .)
    VAR             reduce using rule 33 (value -> not_variable_value .)
    VARIABLE        reduce using rule 33 (value -> not_variable_value .)
    CONST           reduce using rule 33 (value -> not_variable_value .)
    TYPE            reduce using rule 33 (value -> not_variable_value .)
    IF              reduce using rule 33 (value -> not_variable_value .)
    SWITCH          reduce using rule 33 (value -> not_variable_value .)
    CHARSTRING      reduce using rule 33 (value -> not_variable_value .)
    INT             reduce using rule 33 (value -> not_variable_value .)
    FLOAT           reduce using rule 33 (value -> not_variable_value .)
    FOR             reduce using rule 33 (value -> not_variable_value .)
    $end            reduce using rule 33 (value -> not_variable_value .)
    RBRACE          reduce using rule 33 (value -> not_variable_value .)
    RETURN          reduce using rule 33 (value -> not_variable_value .)
    CASE            reduce using rule 33 (value -> not_variable_value .)
    DEFAULT         reduce using rule 33 (value -> not_variable_value .)
    RBRACKET        reduce using rule 33 (value -> not_variable_value .)
    COMMA           reduce using rule 33 (value -> not_variable_value .)
    AND             reduce using rule 33 (value -> not_variable_value .)
    OR              reduce using rule 33 (value -> not_variable_value .)
    NOT             reduce using rule 33 (value -> not_variable_value .)
    LBRACE          reduce using rule 33 (value -> not_variable_value .)
    COLON           reduce using rule 33 (value -> not_variable_value .)
    LBRACKET        reduce using rule 33 (value -> not_variable_value .)
    PERIOD          reduce using rule 33 (value -> not_variable_value .)


state 37

    (35) not_variable_value -> INT .

    PLUS            reduce using rule 35 (not_variable_value -> INT .)
    MINUS           reduce using rule 35 (not_variable_value -> INT .)
    TIMES           reduce using rule 35 (not_variable_value -> INT .)
    DIVIDE          reduce using rule 35 (not_variable_value -> INT .)
    ASSIGN          reduce using rule 35 (not_variable_value -> INT .)
    INCREMENT       reduce using rule 35 (not_variable_value -> INT .)
    DECREMENT       reduce using rule 35 (not_variable_value -> INT .)
    RPAREN          reduce using rule 35 (not_variable_value -> INT .)
    GREATER         reduce using rule 35 (not_variable_value -> INT .)
    LESS            reduce using rule 35 (not_variable_value -> INT .)
    GREATEREQUALS   reduce using rule 35 (not_variable_value -> INT .)
    LESSEQUALS      reduce using rule 35 (not_variable_value -> INT .)
    EQUALS          reduce using rule 35 (not_variable_value -> INT .)
    DIFFERENT       reduce using rule 35 (not_variable_value -> INT .)
    SEMICOLON       reduce using rule 35 (not_variable_value -> INT .)
    PRINT           reduce using rule 35 (not_variable_value -> INT .)
    PRINTF          reduce using rule 35 (not_variable_value -> INT .)
    INPUT           reduce using rule 35 (not_variable_value -> INT .)
    LPAREN          reduce using rule 35 (not_variable_value -> INT .)
    FUNCTION        reduce using rule 35 (not_variable_value -> INT .)
    VAR             reduce using rule 35 (not_variable_value -> INT .)
    VARIABLE        reduce using rule 35 (not_variable_value -> INT .)
    CONST           reduce using rule 35 (not_variable_value -> INT .)
    TYPE            reduce using rule 35 (not_variable_value -> INT .)
    IF              reduce using rule 35 (not_variable_value -> INT .)
    SWITCH          reduce using rule 35 (not_variable_value -> INT .)
    CHARSTRING      reduce using rule 35 (not_variable_value -> INT .)
    INT             reduce using rule 35 (not_variable_value -> INT .)
    FLOAT           reduce using rule 35 (not_variable_value -> INT .)
    FOR             reduce using rule 35 (not_variable_value -> INT .)
    $end            reduce using rule 35 (not_variable_value -> INT .)
    RBRACE          reduce using rule 35 (not_variable_value -> INT .)
    RETURN          reduce using rule 35 (not_variable_value -> INT .)
    CASE            reduce using rule 35 (not_variable_value -> INT .)
    DEFAULT         reduce using rule 35 (not_variable_value -> INT .)
    COMMA           reduce using rule 35 (not_variable_value -> INT .)
    RBRACKET        reduce using rule 35 (not_variable_value -> INT .)
    AND             reduce using rule 35 (not_variable_value -> INT .)
    OR              reduce using rule 35 (not_variable_value -> INT .)
    NOT             reduce using rule 35 (not_variable_value -> INT .)
    LBRACE          reduce using rule 35 (not_variable_value -> INT .)
    COLON           reduce using rule 35 (not_variable_value -> INT .)
    LBRACKET        reduce using rule 35 (not_variable_value -> INT .)
    PERIOD          reduce using rule 35 (not_variable_value -> INT .)


state 38

    (141) struct_structure -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 88


state 39

    (103) conditional_structure -> IF . conditions conditional_body
    (104) conditional_structure -> IF . conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> IF . conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (111) conditions -> . condition
    (112) conditions -> . condition logical_operator conditions
    (113) condition -> . value relational_operator value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    conditions                     shift and go to state 89
    condition                      shift and go to state 90
    value                          shift and go to state 91
    not_variable_value             shift and go to state 36

state 40

    (123) for_estructure -> for_initialization .

    SEMICOLON       reduce using rule 123 (for_estructure -> for_initialization .)
    PRINT           reduce using rule 123 (for_estructure -> for_initialization .)
    PRINTF          reduce using rule 123 (for_estructure -> for_initialization .)
    INPUT           reduce using rule 123 (for_estructure -> for_initialization .)
    LPAREN          reduce using rule 123 (for_estructure -> for_initialization .)
    FUNCTION        reduce using rule 123 (for_estructure -> for_initialization .)
    VAR             reduce using rule 123 (for_estructure -> for_initialization .)
    VARIABLE        reduce using rule 123 (for_estructure -> for_initialization .)
    CONST           reduce using rule 123 (for_estructure -> for_initialization .)
    TYPE            reduce using rule 123 (for_estructure -> for_initialization .)
    IF              reduce using rule 123 (for_estructure -> for_initialization .)
    SWITCH          reduce using rule 123 (for_estructure -> for_initialization .)
    CHARSTRING      reduce using rule 123 (for_estructure -> for_initialization .)
    INT             reduce using rule 123 (for_estructure -> for_initialization .)
    FLOAT           reduce using rule 123 (for_estructure -> for_initialization .)
    FOR             reduce using rule 123 (for_estructure -> for_initialization .)
    $end            reduce using rule 123 (for_estructure -> for_initialization .)
    RBRACE          reduce using rule 123 (for_estructure -> for_initialization .)
    RETURN          reduce using rule 123 (for_estructure -> for_initialization .)
    CASE            reduce using rule 123 (for_estructure -> for_initialization .)
    DEFAULT         reduce using rule 123 (for_estructure -> for_initialization .)


state 41

    (124) for_estructure -> for_infinite_bucle .

    SEMICOLON       reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    PRINT           reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    PRINTF          reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    INPUT           reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    LPAREN          reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    FUNCTION        reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    VAR             reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    VARIABLE        reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    CONST           reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    TYPE            reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    IF              reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    SWITCH          reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    CHARSTRING      reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    INT             reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    FLOAT           reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    FOR             reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    $end            reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    RBRACE          reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    RETURN          reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    CASE            reduce using rule 124 (for_estructure -> for_infinite_bucle .)
    DEFAULT         reduce using rule 124 (for_estructure -> for_infinite_bucle .)


state 42

    (125) for_estructure -> for_iterator .

    SEMICOLON       reduce using rule 125 (for_estructure -> for_iterator .)
    PRINT           reduce using rule 125 (for_estructure -> for_iterator .)
    PRINTF          reduce using rule 125 (for_estructure -> for_iterator .)
    INPUT           reduce using rule 125 (for_estructure -> for_iterator .)
    LPAREN          reduce using rule 125 (for_estructure -> for_iterator .)
    FUNCTION        reduce using rule 125 (for_estructure -> for_iterator .)
    VAR             reduce using rule 125 (for_estructure -> for_iterator .)
    VARIABLE        reduce using rule 125 (for_estructure -> for_iterator .)
    CONST           reduce using rule 125 (for_estructure -> for_iterator .)
    TYPE            reduce using rule 125 (for_estructure -> for_iterator .)
    IF              reduce using rule 125 (for_estructure -> for_iterator .)
    SWITCH          reduce using rule 125 (for_estructure -> for_iterator .)
    CHARSTRING      reduce using rule 125 (for_estructure -> for_iterator .)
    INT             reduce using rule 125 (for_estructure -> for_iterator .)
    FLOAT           reduce using rule 125 (for_estructure -> for_iterator .)
    FOR             reduce using rule 125 (for_estructure -> for_iterator .)
    $end            reduce using rule 125 (for_estructure -> for_iterator .)
    RBRACE          reduce using rule 125 (for_estructure -> for_iterator .)
    RETURN          reduce using rule 125 (for_estructure -> for_iterator .)
    CASE            reduce using rule 125 (for_estructure -> for_iterator .)
    DEFAULT         reduce using rule 125 (for_estructure -> for_iterator .)


state 43

    (129) switch_structure -> SWITCH . switch_expression LBRACE case_blocks RBRACE
    (130) switch_expression -> . VARIABLE SHORTASSIGN value
    (131) switch_expression -> . empty
    (136) empty -> .

    VARIABLE        shift and go to state 93
    LBRACE          reduce using rule 136 (empty -> .)

    switch_expression              shift and go to state 92
    empty                          shift and go to state 94

state 44

    (36) not_variable_value -> FLOAT .

    PLUS            reduce using rule 36 (not_variable_value -> FLOAT .)
    MINUS           reduce using rule 36 (not_variable_value -> FLOAT .)
    TIMES           reduce using rule 36 (not_variable_value -> FLOAT .)
    DIVIDE          reduce using rule 36 (not_variable_value -> FLOAT .)
    ASSIGN          reduce using rule 36 (not_variable_value -> FLOAT .)
    INCREMENT       reduce using rule 36 (not_variable_value -> FLOAT .)
    DECREMENT       reduce using rule 36 (not_variable_value -> FLOAT .)
    RPAREN          reduce using rule 36 (not_variable_value -> FLOAT .)
    GREATER         reduce using rule 36 (not_variable_value -> FLOAT .)
    LESS            reduce using rule 36 (not_variable_value -> FLOAT .)
    GREATEREQUALS   reduce using rule 36 (not_variable_value -> FLOAT .)
    LESSEQUALS      reduce using rule 36 (not_variable_value -> FLOAT .)
    EQUALS          reduce using rule 36 (not_variable_value -> FLOAT .)
    DIFFERENT       reduce using rule 36 (not_variable_value -> FLOAT .)
    SEMICOLON       reduce using rule 36 (not_variable_value -> FLOAT .)
    PRINT           reduce using rule 36 (not_variable_value -> FLOAT .)
    PRINTF          reduce using rule 36 (not_variable_value -> FLOAT .)
    INPUT           reduce using rule 36 (not_variable_value -> FLOAT .)
    LPAREN          reduce using rule 36 (not_variable_value -> FLOAT .)
    FUNCTION        reduce using rule 36 (not_variable_value -> FLOAT .)
    VAR             reduce using rule 36 (not_variable_value -> FLOAT .)
    VARIABLE        reduce using rule 36 (not_variable_value -> FLOAT .)
    CONST           reduce using rule 36 (not_variable_value -> FLOAT .)
    TYPE            reduce using rule 36 (not_variable_value -> FLOAT .)
    IF              reduce using rule 36 (not_variable_value -> FLOAT .)
    SWITCH          reduce using rule 36 (not_variable_value -> FLOAT .)
    CHARSTRING      reduce using rule 36 (not_variable_value -> FLOAT .)
    INT             reduce using rule 36 (not_variable_value -> FLOAT .)
    FLOAT           reduce using rule 36 (not_variable_value -> FLOAT .)
    FOR             reduce using rule 36 (not_variable_value -> FLOAT .)
    $end            reduce using rule 36 (not_variable_value -> FLOAT .)
    RBRACE          reduce using rule 36 (not_variable_value -> FLOAT .)
    RETURN          reduce using rule 36 (not_variable_value -> FLOAT .)
    CASE            reduce using rule 36 (not_variable_value -> FLOAT .)
    DEFAULT         reduce using rule 36 (not_variable_value -> FLOAT .)
    RBRACKET        reduce using rule 36 (not_variable_value -> FLOAT .)
    COMMA           reduce using rule 36 (not_variable_value -> FLOAT .)
    AND             reduce using rule 36 (not_variable_value -> FLOAT .)
    OR              reduce using rule 36 (not_variable_value -> FLOAT .)
    NOT             reduce using rule 36 (not_variable_value -> FLOAT .)
    LBRACE          reduce using rule 36 (not_variable_value -> FLOAT .)
    COLON           reduce using rule 36 (not_variable_value -> FLOAT .)
    LBRACKET        reduce using rule 36 (not_variable_value -> FLOAT .)
    PERIOD          reduce using rule 36 (not_variable_value -> FLOAT .)


state 45

    (126) for_initialization -> FOR . VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> FOR . LBRACE statement RBRACE
    (128) for_iterator -> FOR . VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    VARIABLE        shift and go to state 95
    LBRACE          shift and go to state 96


state 46

    (2) statement -> import blocks .

    $end            reduce using rule 2 (statement -> import blocks .)
    RBRACE          reduce using rule 2 (statement -> import blocks .)
    RETURN          reduce using rule 2 (statement -> import blocks .)
    CASE            reduce using rule 2 (statement -> import blocks .)
    DEFAULT         reduce using rule 2 (statement -> import blocks .)


state 47

    (7) statement -> import main . LBRACE blocks RBRACE

    LBRACE          shift and go to state 97


state 48

    (3) statement -> package blocks .

    $end            reduce using rule 3 (statement -> package blocks .)
    RBRACE          reduce using rule 3 (statement -> package blocks .)
    RETURN          reduce using rule 3 (statement -> package blocks .)
    CASE            reduce using rule 3 (statement -> package blocks .)
    DEFAULT         reduce using rule 3 (statement -> package blocks .)


state 49

    (4) statement -> package import . blocks
    (8) statement -> package import . main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 98
    main                           shift and go to state 99
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 50

    (6) statement -> package main . LBRACE blocks RBRACE

    LBRACE          shift and go to state 100


state 51

    (5) statement -> main LBRACE . blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 101
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 52

    (18) blocks -> block blocks .

    $end            reduce using rule 18 (blocks -> block blocks .)
    RBRACE          reduce using rule 18 (blocks -> block blocks .)
    RETURN          reduce using rule 18 (blocks -> block blocks .)
    CASE            reduce using rule 18 (blocks -> block blocks .)
    DEFAULT         reduce using rule 18 (blocks -> block blocks .)


state 53

    (19) blocks -> block SEMICOLON . blocks
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    block                          shift and go to state 6
    blocks                         shift and go to state 102
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 54

    (66) function -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> FUNCTION . VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> FUNCTION . VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> FUNCTION . VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE

    VARIABLE        shift and go to state 74


state 55

    (10) import -> IMPORT CHARSTRING .

    FUNCTION        reduce using rule 10 (import -> IMPORT CHARSTRING .)
    PRINT           reduce using rule 10 (import -> IMPORT CHARSTRING .)
    PRINTF          reduce using rule 10 (import -> IMPORT CHARSTRING .)
    INPUT           reduce using rule 10 (import -> IMPORT CHARSTRING .)
    LPAREN          reduce using rule 10 (import -> IMPORT CHARSTRING .)
    VAR             reduce using rule 10 (import -> IMPORT CHARSTRING .)
    VARIABLE        reduce using rule 10 (import -> IMPORT CHARSTRING .)
    CONST           reduce using rule 10 (import -> IMPORT CHARSTRING .)
    TYPE            reduce using rule 10 (import -> IMPORT CHARSTRING .)
    IF              reduce using rule 10 (import -> IMPORT CHARSTRING .)
    SWITCH          reduce using rule 10 (import -> IMPORT CHARSTRING .)
    CHARSTRING      reduce using rule 10 (import -> IMPORT CHARSTRING .)
    INT             reduce using rule 10 (import -> IMPORT CHARSTRING .)
    FLOAT           reduce using rule 10 (import -> IMPORT CHARSTRING .)
    FOR             reduce using rule 10 (import -> IMPORT CHARSTRING .)


state 56

    (11) import -> IMPORT LPAREN . values_for_import RPAREN
    (12) values_for_import -> . CHARSTRING
    (13) values_for_import -> . CHARSTRING values_for_import

    CHARSTRING      shift and go to state 104

    values_for_import              shift and go to state 103

state 57

    (86) operation -> LPAREN value . RPAREN operator value
    (87) operation -> LPAREN value . operator value RPAREN
    (89) operation -> LPAREN value . operator operation RPAREN
    (90) operation -> LPAREN value . RPAREN operator operation
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN

    RPAREN          shift and go to state 105
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84

    operator                       shift and go to state 106

state 58

    (30) value -> VARIABLE .
    (31) value -> VARIABLE . LBRACKET RBRACKET
    (32) value -> VARIABLE . LBRACKET value RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    RPAREN          reduce using rule 30 (value -> VARIABLE .)
    PLUS            reduce using rule 30 (value -> VARIABLE .)
    MINUS           reduce using rule 30 (value -> VARIABLE .)
    TIMES           reduce using rule 30 (value -> VARIABLE .)
    DIVIDE          reduce using rule 30 (value -> VARIABLE .)
    ASSIGN          reduce using rule 30 (value -> VARIABLE .)
    GREATER         reduce using rule 30 (value -> VARIABLE .)
    LESS            reduce using rule 30 (value -> VARIABLE .)
    GREATEREQUALS   reduce using rule 30 (value -> VARIABLE .)
    LESSEQUALS      reduce using rule 30 (value -> VARIABLE .)
    EQUALS          reduce using rule 30 (value -> VARIABLE .)
    DIFFERENT       reduce using rule 30 (value -> VARIABLE .)
    INCREMENT       reduce using rule 30 (value -> VARIABLE .)
    DECREMENT       reduce using rule 30 (value -> VARIABLE .)
    SEMICOLON       reduce using rule 30 (value -> VARIABLE .)
    PRINT           reduce using rule 30 (value -> VARIABLE .)
    PRINTF          reduce using rule 30 (value -> VARIABLE .)
    INPUT           reduce using rule 30 (value -> VARIABLE .)
    LPAREN          reduce using rule 30 (value -> VARIABLE .)
    FUNCTION        reduce using rule 30 (value -> VARIABLE .)
    VAR             reduce using rule 30 (value -> VARIABLE .)
    VARIABLE        reduce using rule 30 (value -> VARIABLE .)
    CONST           reduce using rule 30 (value -> VARIABLE .)
    TYPE            reduce using rule 30 (value -> VARIABLE .)
    IF              reduce using rule 30 (value -> VARIABLE .)
    SWITCH          reduce using rule 30 (value -> VARIABLE .)
    CHARSTRING      reduce using rule 30 (value -> VARIABLE .)
    INT             reduce using rule 30 (value -> VARIABLE .)
    FLOAT           reduce using rule 30 (value -> VARIABLE .)
    FOR             reduce using rule 30 (value -> VARIABLE .)
    $end            reduce using rule 30 (value -> VARIABLE .)
    RBRACE          reduce using rule 30 (value -> VARIABLE .)
    RETURN          reduce using rule 30 (value -> VARIABLE .)
    CASE            reduce using rule 30 (value -> VARIABLE .)
    DEFAULT         reduce using rule 30 (value -> VARIABLE .)
    RBRACKET        reduce using rule 30 (value -> VARIABLE .)
    COMMA           reduce using rule 30 (value -> VARIABLE .)
    AND             reduce using rule 30 (value -> VARIABLE .)
    OR              reduce using rule 30 (value -> VARIABLE .)
    NOT             reduce using rule 30 (value -> VARIABLE .)
    LBRACE          reduce using rule 30 (value -> VARIABLE .)
    COLON           reduce using rule 30 (value -> VARIABLE .)
    PERIOD          reduce using rule 30 (value -> VARIABLE .)
    LBRACKET        shift and go to state 107

  ! LBRACKET        [ reduce using rule 30 (value -> VARIABLE .) ]


state 59

    (14) package -> PACKAGE VARIABLE .

    IMPORT          reduce using rule 14 (package -> PACKAGE VARIABLE .)
    FUNCTION        reduce using rule 14 (package -> PACKAGE VARIABLE .)
    PRINT           reduce using rule 14 (package -> PACKAGE VARIABLE .)
    PRINTF          reduce using rule 14 (package -> PACKAGE VARIABLE .)
    INPUT           reduce using rule 14 (package -> PACKAGE VARIABLE .)
    LPAREN          reduce using rule 14 (package -> PACKAGE VARIABLE .)
    VAR             reduce using rule 14 (package -> PACKAGE VARIABLE .)
    VARIABLE        reduce using rule 14 (package -> PACKAGE VARIABLE .)
    CONST           reduce using rule 14 (package -> PACKAGE VARIABLE .)
    TYPE            reduce using rule 14 (package -> PACKAGE VARIABLE .)
    IF              reduce using rule 14 (package -> PACKAGE VARIABLE .)
    SWITCH          reduce using rule 14 (package -> PACKAGE VARIABLE .)
    CHARSTRING      reduce using rule 14 (package -> PACKAGE VARIABLE .)
    INT             reduce using rule 14 (package -> PACKAGE VARIABLE .)
    FLOAT           reduce using rule 14 (package -> PACKAGE VARIABLE .)
    FOR             reduce using rule 14 (package -> PACKAGE VARIABLE .)


state 60

    (15) package -> PACKAGE MAIN .

    IMPORT          reduce using rule 15 (package -> PACKAGE MAIN .)
    FUNCTION        reduce using rule 15 (package -> PACKAGE MAIN .)
    PRINT           reduce using rule 15 (package -> PACKAGE MAIN .)
    PRINTF          reduce using rule 15 (package -> PACKAGE MAIN .)
    INPUT           reduce using rule 15 (package -> PACKAGE MAIN .)
    LPAREN          reduce using rule 15 (package -> PACKAGE MAIN .)
    VAR             reduce using rule 15 (package -> PACKAGE MAIN .)
    VARIABLE        reduce using rule 15 (package -> PACKAGE MAIN .)
    CONST           reduce using rule 15 (package -> PACKAGE MAIN .)
    TYPE            reduce using rule 15 (package -> PACKAGE MAIN .)
    IF              reduce using rule 15 (package -> PACKAGE MAIN .)
    SWITCH          reduce using rule 15 (package -> PACKAGE MAIN .)
    CHARSTRING      reduce using rule 15 (package -> PACKAGE MAIN .)
    INT             reduce using rule 15 (package -> PACKAGE MAIN .)
    FLOAT           reduce using rule 15 (package -> PACKAGE MAIN .)
    FOR             reduce using rule 15 (package -> PACKAGE MAIN .)


state 61

    (42) variable_declaration -> VARIABLE SHORTASSIGN . value
    (43) variable_declaration -> VARIABLE SHORTASSIGN . operation
    (149) map_structure -> VARIABLE SHORTASSIGN . MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> VARIABLE SHORTASSIGN . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> VARIABLE SHORTASSIGN . LBRACKET RBRACKET type LBRACE values RBRACE
    (157) slice_structure -> VARIABLE SHORTASSIGN . LBRACKET RBRACKET type
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    MAP             shift and go to state 110
    MAKE            shift and go to state 112
    LBRACKET        shift and go to state 111
    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 108
    operation                      shift and go to state 109
    not_variable_value             shift and go to state 36

state 62

    (45) variable_assignation -> VARIABLE assignation . value
    (46) variable_assignation -> VARIABLE assignation . operation
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 113
    operation                      shift and go to state 114
    not_variable_value             shift and go to state 36

state 63

    (47) variable_assignation -> VARIABLE double_operator .

    SEMICOLON       reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    PRINT           reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    PRINTF          reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    INPUT           reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    LPAREN          reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    FUNCTION        reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    VAR             reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    VARIABLE        reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    CONST           reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    TYPE            reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    IF              reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    SWITCH          reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    CHARSTRING      reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    INT             reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    FLOAT           reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    FOR             reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    $end            reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    RBRACE          reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    RETURN          reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    CASE            reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)
    DEFAULT         reduce using rule 47 (variable_assignation -> VARIABLE double_operator .)


state 64

    (31) value -> VARIABLE LBRACKET . RBRACKET
    (32) value -> VARIABLE LBRACKET . value RBRACKET
    (154) map_assign -> VARIABLE LBRACKET . value RBRACKET ASSIGN value
    (148) array_assign -> VARIABLE LBRACKET . INT RBRACKET ASSIGN value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    RBRACKET        shift and go to state 115
    INT             shift and go to state 117
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    FLOAT           shift and go to state 44

    value                          shift and go to state 116
    not_variable_value             shift and go to state 36

state 65

    (158) slice_structure -> VARIABLE ASSIGN . append_statement
    (50) assignation -> ASSIGN .
    (159) append_statement -> . APPEND LPAREN VARIABLE COMMA values RPAREN
    (160) append_statement -> . APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN

    VARIABLE        reduce using rule 50 (assignation -> ASSIGN .)
    LPAREN          reduce using rule 50 (assignation -> ASSIGN .)
    CHARSTRING      reduce using rule 50 (assignation -> ASSIGN .)
    INT             reduce using rule 50 (assignation -> ASSIGN .)
    FLOAT           reduce using rule 50 (assignation -> ASSIGN .)
    APPEND          shift and go to state 119

    append_statement               shift and go to state 118

state 66

    (51) assignation -> PLUSASSIGN .

    VARIABLE        reduce using rule 51 (assignation -> PLUSASSIGN .)
    LPAREN          reduce using rule 51 (assignation -> PLUSASSIGN .)
    CHARSTRING      reduce using rule 51 (assignation -> PLUSASSIGN .)
    INT             reduce using rule 51 (assignation -> PLUSASSIGN .)
    FLOAT           reduce using rule 51 (assignation -> PLUSASSIGN .)


state 67

    (52) assignation -> MINUSASSIGN .

    VARIABLE        reduce using rule 52 (assignation -> MINUSASSIGN .)
    LPAREN          reduce using rule 52 (assignation -> MINUSASSIGN .)
    CHARSTRING      reduce using rule 52 (assignation -> MINUSASSIGN .)
    INT             reduce using rule 52 (assignation -> MINUSASSIGN .)
    FLOAT           reduce using rule 52 (assignation -> MINUSASSIGN .)


state 68

    (53) assignation -> TIMESASSIGN .

    VARIABLE        reduce using rule 53 (assignation -> TIMESASSIGN .)
    LPAREN          reduce using rule 53 (assignation -> TIMESASSIGN .)
    CHARSTRING      reduce using rule 53 (assignation -> TIMESASSIGN .)
    INT             reduce using rule 53 (assignation -> TIMESASSIGN .)
    FLOAT           reduce using rule 53 (assignation -> TIMESASSIGN .)


state 69

    (54) assignation -> DIVIDEASSIGN .

    VARIABLE        reduce using rule 54 (assignation -> DIVIDEASSIGN .)
    LPAREN          reduce using rule 54 (assignation -> DIVIDEASSIGN .)
    CHARSTRING      reduce using rule 54 (assignation -> DIVIDEASSIGN .)
    INT             reduce using rule 54 (assignation -> DIVIDEASSIGN .)
    FLOAT           reduce using rule 54 (assignation -> DIVIDEASSIGN .)


state 70

    (55) assignation -> MODASSIGN .

    VARIABLE        reduce using rule 55 (assignation -> MODASSIGN .)
    LPAREN          reduce using rule 55 (assignation -> MODASSIGN .)
    CHARSTRING      reduce using rule 55 (assignation -> MODASSIGN .)
    INT             reduce using rule 55 (assignation -> MODASSIGN .)
    FLOAT           reduce using rule 55 (assignation -> MODASSIGN .)


state 71

    (98) double_operator -> INCREMENT .

    SEMICOLON       reduce using rule 98 (double_operator -> INCREMENT .)
    PRINT           reduce using rule 98 (double_operator -> INCREMENT .)
    PRINTF          reduce using rule 98 (double_operator -> INCREMENT .)
    INPUT           reduce using rule 98 (double_operator -> INCREMENT .)
    LPAREN          reduce using rule 98 (double_operator -> INCREMENT .)
    FUNCTION        reduce using rule 98 (double_operator -> INCREMENT .)
    VAR             reduce using rule 98 (double_operator -> INCREMENT .)
    VARIABLE        reduce using rule 98 (double_operator -> INCREMENT .)
    CONST           reduce using rule 98 (double_operator -> INCREMENT .)
    TYPE            reduce using rule 98 (double_operator -> INCREMENT .)
    IF              reduce using rule 98 (double_operator -> INCREMENT .)
    SWITCH          reduce using rule 98 (double_operator -> INCREMENT .)
    CHARSTRING      reduce using rule 98 (double_operator -> INCREMENT .)
    INT             reduce using rule 98 (double_operator -> INCREMENT .)
    FLOAT           reduce using rule 98 (double_operator -> INCREMENT .)
    FOR             reduce using rule 98 (double_operator -> INCREMENT .)
    $end            reduce using rule 98 (double_operator -> INCREMENT .)
    RBRACE          reduce using rule 98 (double_operator -> INCREMENT .)
    RETURN          reduce using rule 98 (double_operator -> INCREMENT .)
    CASE            reduce using rule 98 (double_operator -> INCREMENT .)
    DEFAULT         reduce using rule 98 (double_operator -> INCREMENT .)
    RPAREN          reduce using rule 98 (double_operator -> INCREMENT .)
    LBRACE          reduce using rule 98 (double_operator -> INCREMENT .)


state 72

    (99) double_operator -> DECREMENT .

    SEMICOLON       reduce using rule 99 (double_operator -> DECREMENT .)
    PRINT           reduce using rule 99 (double_operator -> DECREMENT .)
    PRINTF          reduce using rule 99 (double_operator -> DECREMENT .)
    INPUT           reduce using rule 99 (double_operator -> DECREMENT .)
    LPAREN          reduce using rule 99 (double_operator -> DECREMENT .)
    FUNCTION        reduce using rule 99 (double_operator -> DECREMENT .)
    VAR             reduce using rule 99 (double_operator -> DECREMENT .)
    VARIABLE        reduce using rule 99 (double_operator -> DECREMENT .)
    CONST           reduce using rule 99 (double_operator -> DECREMENT .)
    TYPE            reduce using rule 99 (double_operator -> DECREMENT .)
    IF              reduce using rule 99 (double_operator -> DECREMENT .)
    SWITCH          reduce using rule 99 (double_operator -> DECREMENT .)
    CHARSTRING      reduce using rule 99 (double_operator -> DECREMENT .)
    INT             reduce using rule 99 (double_operator -> DECREMENT .)
    FLOAT           reduce using rule 99 (double_operator -> DECREMENT .)
    FOR             reduce using rule 99 (double_operator -> DECREMENT .)
    $end            reduce using rule 99 (double_operator -> DECREMENT .)
    RBRACE          reduce using rule 99 (double_operator -> DECREMENT .)
    RETURN          reduce using rule 99 (double_operator -> DECREMENT .)
    CASE            reduce using rule 99 (double_operator -> DECREMENT .)
    DEFAULT         reduce using rule 99 (double_operator -> DECREMENT .)
    RPAREN          reduce using rule 99 (double_operator -> DECREMENT .)
    LBRACE          reduce using rule 99 (double_operator -> DECREMENT .)


state 73

    (16) main -> FUNCTION MAIN . LPAREN RPAREN

    LPAREN          shift and go to state 120


state 74

    (66) function -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE RBRACE
    (68) function -> FUNCTION VARIABLE . LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> FUNCTION VARIABLE . LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> FUNCTION VARIABLE . LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> FUNCTION VARIABLE . LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> FUNCTION VARIABLE . LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> FUNCTION VARIABLE . LPAREN parameters RPAREN type LBRACE return RBRACE

    LPAREN          shift and go to state 121


state 75

    (77) print_statement -> PRINT LPAREN . values RPAREN
    (79) print_statement -> PRINT LPAREN . operation RPAREN
    (80) print_statement -> PRINT LPAREN . RPAREN
    (37) values -> . value
    (38) values -> . value COMMA values
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    RPAREN          shift and go to state 123
    LPAREN          shift and go to state 9
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 122
    operation                      shift and go to state 124
    value                          shift and go to state 125
    not_variable_value             shift and go to state 36

state 76

    (78) print_statement -> PRINTF LPAREN . FORMATSTRING COMMA values RPAREN

    FORMATSTRING    shift and go to state 126


state 77

    (81) input_statement -> INPUT LPAREN . values RPAREN
    (82) input_statement -> INPUT LPAREN . operation RPAREN
    (83) input_statement -> INPUT LPAREN . RPAREN
    (37) values -> . value
    (38) values -> . value COMMA values
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    RPAREN          shift and go to state 128
    LPAREN          shift and go to state 9
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 127
    operation                      shift and go to state 129
    value                          shift and go to state 125
    not_variable_value             shift and go to state 36

state 78

    (84) operation -> value operator . value
    (85) operation -> value operator . LPAREN value RPAREN
    (88) operation -> value operator . operation
    (91) operation -> value operator . LPAREN operation RPAREN
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    LPAREN          shift and go to state 131
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 130
    operation                      shift and go to state 132
    not_variable_value             shift and go to state 36

state 79

    (92) operation -> value double_operator .

    SEMICOLON       reduce using rule 92 (operation -> value double_operator .)
    PRINT           reduce using rule 92 (operation -> value double_operator .)
    PRINTF          reduce using rule 92 (operation -> value double_operator .)
    INPUT           reduce using rule 92 (operation -> value double_operator .)
    LPAREN          reduce using rule 92 (operation -> value double_operator .)
    FUNCTION        reduce using rule 92 (operation -> value double_operator .)
    VAR             reduce using rule 92 (operation -> value double_operator .)
    VARIABLE        reduce using rule 92 (operation -> value double_operator .)
    CONST           reduce using rule 92 (operation -> value double_operator .)
    TYPE            reduce using rule 92 (operation -> value double_operator .)
    IF              reduce using rule 92 (operation -> value double_operator .)
    SWITCH          reduce using rule 92 (operation -> value double_operator .)
    CHARSTRING      reduce using rule 92 (operation -> value double_operator .)
    INT             reduce using rule 92 (operation -> value double_operator .)
    FLOAT           reduce using rule 92 (operation -> value double_operator .)
    FOR             reduce using rule 92 (operation -> value double_operator .)
    $end            reduce using rule 92 (operation -> value double_operator .)
    RBRACE          reduce using rule 92 (operation -> value double_operator .)
    RETURN          reduce using rule 92 (operation -> value double_operator .)
    CASE            reduce using rule 92 (operation -> value double_operator .)
    DEFAULT         reduce using rule 92 (operation -> value double_operator .)
    RPAREN          reduce using rule 92 (operation -> value double_operator .)


state 80

    (93) operator -> PLUS .

    LPAREN          reduce using rule 93 (operator -> PLUS .)
    VARIABLE        reduce using rule 93 (operator -> PLUS .)
    CHARSTRING      reduce using rule 93 (operator -> PLUS .)
    INT             reduce using rule 93 (operator -> PLUS .)
    FLOAT           reduce using rule 93 (operator -> PLUS .)


state 81

    (94) operator -> MINUS .

    LPAREN          reduce using rule 94 (operator -> MINUS .)
    VARIABLE        reduce using rule 94 (operator -> MINUS .)
    CHARSTRING      reduce using rule 94 (operator -> MINUS .)
    INT             reduce using rule 94 (operator -> MINUS .)
    FLOAT           reduce using rule 94 (operator -> MINUS .)


state 82

    (95) operator -> TIMES .

    LPAREN          reduce using rule 95 (operator -> TIMES .)
    VARIABLE        reduce using rule 95 (operator -> TIMES .)
    CHARSTRING      reduce using rule 95 (operator -> TIMES .)
    INT             reduce using rule 95 (operator -> TIMES .)
    FLOAT           reduce using rule 95 (operator -> TIMES .)


state 83

    (96) operator -> DIVIDE .

    LPAREN          reduce using rule 96 (operator -> DIVIDE .)
    VARIABLE        reduce using rule 96 (operator -> DIVIDE .)
    CHARSTRING      reduce using rule 96 (operator -> DIVIDE .)
    INT             reduce using rule 96 (operator -> DIVIDE .)
    FLOAT           reduce using rule 96 (operator -> DIVIDE .)


state 84

    (97) operator -> ASSIGN .

    LPAREN          reduce using rule 97 (operator -> ASSIGN .)
    VARIABLE        reduce using rule 97 (operator -> ASSIGN .)
    CHARSTRING      reduce using rule 97 (operator -> ASSIGN .)
    INT             reduce using rule 97 (operator -> ASSIGN .)
    FLOAT           reduce using rule 97 (operator -> ASSIGN .)


state 85

    (39) variable_declaration -> VAR variables . type
    (40) variable_declaration -> VAR variables . type ASSIGN value
    (41) variable_declaration -> VAR variables . type ASSIGN operation
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 133

state 86

    (145) array_structure -> VAR VARIABLE . LBRACKET INT RBRACKET type
    (146) array_structure -> VAR VARIABLE . ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> VAR VARIABLE . LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (156) slice_structure -> VAR VARIABLE . LBRACKET RBRACKET type
    (28) variables -> VARIABLE .
    (29) variables -> VARIABLE . COMMA variables

    LBRACKET        shift and go to state 142
    ASSIGN          shift and go to state 143
    INT             reduce using rule 28 (variables -> VARIABLE .)
    INT32           reduce using rule 28 (variables -> VARIABLE .)
    INT64           reduce using rule 28 (variables -> VARIABLE .)
    STRING          reduce using rule 28 (variables -> VARIABLE .)
    FLOAT           reduce using rule 28 (variables -> VARIABLE .)
    FLOAT32         reduce using rule 28 (variables -> VARIABLE .)
    FLOAT64         reduce using rule 28 (variables -> VARIABLE .)
    BOOL            reduce using rule 28 (variables -> VARIABLE .)
    COMMA           shift and go to state 144


state 87

    (44) variable_declaration -> CONST VARIABLE . ASSIGN value

    ASSIGN          shift and go to state 145


state 88

    (141) struct_structure -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 146


state 89

    (103) conditional_structure -> IF conditions . conditional_body
    (104) conditional_structure -> IF conditions . conditional_body ELSE conditional_body
    (105) conditional_structure -> IF conditions . conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (106) conditional_body -> . LBRACE statement RBRACE
    (107) conditional_body -> . LBRACE statement return RBRACE
    (108) conditional_body -> . LBRACE return RBRACE
    (109) conditional_body -> . LBRACE BREAK RBRACE
    (110) conditional_body -> . LBRACE CONTINUE RBRACE

    LBRACE          shift and go to state 148

    conditional_body               shift and go to state 147

state 90

    (111) conditions -> condition .
    (112) conditions -> condition . logical_operator conditions
    (114) logical_operator -> . AND
    (115) logical_operator -> . OR
    (116) logical_operator -> . NOT

    LBRACE          reduce using rule 111 (conditions -> condition .)
    AND             shift and go to state 150
    OR              shift and go to state 151
    NOT             shift and go to state 152

    logical_operator               shift and go to state 149

state 91

    (113) condition -> value . relational_operator value
    (117) relational_operator -> . GREATER
    (118) relational_operator -> . LESS
    (119) relational_operator -> . GREATEREQUALS
    (120) relational_operator -> . LESSEQUALS
    (121) relational_operator -> . EQUALS
    (122) relational_operator -> . DIFFERENT

    GREATER         shift and go to state 154
    LESS            shift and go to state 155
    GREATEREQUALS   shift and go to state 156
    LESSEQUALS      shift and go to state 157
    EQUALS          shift and go to state 158
    DIFFERENT       shift and go to state 159

    relational_operator            shift and go to state 153

state 92

    (129) switch_structure -> SWITCH switch_expression . LBRACE case_blocks RBRACE

    LBRACE          shift and go to state 160


state 93

    (130) switch_expression -> VARIABLE . SHORTASSIGN value

    SHORTASSIGN     shift and go to state 161


state 94

    (131) switch_expression -> empty .

    LBRACE          reduce using rule 131 (switch_expression -> empty .)


state 95

    (126) for_initialization -> FOR VARIABLE . SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (128) for_iterator -> FOR VARIABLE . COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    SHORTASSIGN     shift and go to state 162
    COMMA           shift and go to state 163


state 96

    (127) for_infinite_bucle -> FOR LBRACE . statement RBRACE
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 164
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 97

    (7) statement -> import main LBRACE . blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 165
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 98

    (4) statement -> package import blocks .

    $end            reduce using rule 4 (statement -> package import blocks .)
    RBRACE          reduce using rule 4 (statement -> package import blocks .)
    RETURN          reduce using rule 4 (statement -> package import blocks .)
    CASE            reduce using rule 4 (statement -> package import blocks .)
    DEFAULT         reduce using rule 4 (statement -> package import blocks .)


state 99

    (8) statement -> package import main . LBRACE blocks RBRACE

    LBRACE          shift and go to state 166


state 100

    (6) statement -> package main LBRACE . blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 167
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 101

    (5) statement -> main LBRACE blocks . RBRACE

    RBRACE          shift and go to state 168


state 102

    (19) blocks -> block SEMICOLON blocks .

    $end            reduce using rule 19 (blocks -> block SEMICOLON blocks .)
    RBRACE          reduce using rule 19 (blocks -> block SEMICOLON blocks .)
    RETURN          reduce using rule 19 (blocks -> block SEMICOLON blocks .)
    CASE            reduce using rule 19 (blocks -> block SEMICOLON blocks .)
    DEFAULT         reduce using rule 19 (blocks -> block SEMICOLON blocks .)


state 103

    (11) import -> IMPORT LPAREN values_for_import . RPAREN

    RPAREN          shift and go to state 169


state 104

    (12) values_for_import -> CHARSTRING .
    (13) values_for_import -> CHARSTRING . values_for_import
    (12) values_for_import -> . CHARSTRING
    (13) values_for_import -> . CHARSTRING values_for_import

    RPAREN          reduce using rule 12 (values_for_import -> CHARSTRING .)
    CHARSTRING      shift and go to state 104

    values_for_import              shift and go to state 170

state 105

    (86) operation -> LPAREN value RPAREN . operator value
    (90) operation -> LPAREN value RPAREN . operator operation
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN

    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84

    operator                       shift and go to state 171

state 106

    (87) operation -> LPAREN value operator . value RPAREN
    (89) operation -> LPAREN value operator . operation RPAREN
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 172
    operation                      shift and go to state 173
    not_variable_value             shift and go to state 36

state 107

    (31) value -> VARIABLE LBRACKET . RBRACKET
    (32) value -> VARIABLE LBRACKET . value RBRACKET
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    RBRACKET        shift and go to state 115
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 174
    not_variable_value             shift and go to state 36

state 108

    (42) variable_declaration -> VARIABLE SHORTASSIGN value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    SEMICOLON       reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    PRINT           reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    PRINTF          reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    INPUT           reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    LPAREN          reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    FUNCTION        reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    VAR             reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    VARIABLE        reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    CONST           reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    TYPE            reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    IF              reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    SWITCH          reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    CHARSTRING      reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    INT             reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    FLOAT           reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    FOR             reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    $end            reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    RBRACE          reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    RETURN          reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    CASE            reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    DEFAULT         reduce using rule 42 (variable_declaration -> VARIABLE SHORTASSIGN value .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 109

    (43) variable_declaration -> VARIABLE SHORTASSIGN operation .

    SEMICOLON       reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    PRINT           reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    PRINTF          reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    INPUT           reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    LPAREN          reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    FUNCTION        reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    VAR             reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    VARIABLE        reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    CONST           reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    TYPE            reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    IF              reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    SWITCH          reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    CHARSTRING      reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    INT             reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    FLOAT           reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    FOR             reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    $end            reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    RBRACE          reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    RETURN          reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    CASE            reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)
    DEFAULT         reduce using rule 43 (variable_declaration -> VARIABLE SHORTASSIGN operation .)


state 110

    (149) map_structure -> VARIABLE SHORTASSIGN MAP . LBRACKET type RBRACKET type LBRACE map_values RBRACE

    LBRACKET        shift and go to state 175


state 111

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET . RBRACKET type LBRACE values RBRACE
    (157) slice_structure -> VARIABLE SHORTASSIGN LBRACKET . RBRACKET type

    RBRACKET        shift and go to state 176


state 112

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN

    LPAREN          shift and go to state 177


state 113

    (45) variable_assignation -> VARIABLE assignation value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    SEMICOLON       reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    PRINT           reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    PRINTF          reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    INPUT           reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    LPAREN          reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    FUNCTION        reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    VAR             reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    VARIABLE        reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    CONST           reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    TYPE            reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    IF              reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    SWITCH          reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    CHARSTRING      reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    INT             reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    FLOAT           reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    FOR             reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    $end            reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    RBRACE          reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    RETURN          reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    CASE            reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    DEFAULT         reduce using rule 45 (variable_assignation -> VARIABLE assignation value .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 114

    (46) variable_assignation -> VARIABLE assignation operation .

    SEMICOLON       reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    PRINT           reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    PRINTF          reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    INPUT           reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    LPAREN          reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    FUNCTION        reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    VAR             reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    VARIABLE        reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    CONST           reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    TYPE            reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    IF              reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    SWITCH          reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    CHARSTRING      reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    INT             reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    FLOAT           reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    FOR             reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    $end            reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    RBRACE          reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    RETURN          reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    CASE            reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)
    DEFAULT         reduce using rule 46 (variable_assignation -> VARIABLE assignation operation .)


state 115

    (31) value -> VARIABLE LBRACKET RBRACKET .

    PLUS            reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    MINUS           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    TIMES           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    ASSIGN          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    INCREMENT       reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    DECREMENT       reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    RPAREN          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    GREATER         reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    LESS            reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    GREATEREQUALS   reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    LESSEQUALS      reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    EQUALS          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    DIFFERENT       reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    SEMICOLON       reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    PRINT           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    PRINTF          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    INPUT           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    LPAREN          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    VAR             reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    VARIABLE        reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    CONST           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    TYPE            reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    IF              reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    SWITCH          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    CHARSTRING      reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    INT             reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    FLOAT           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    FOR             reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    $end            reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    RBRACE          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    RETURN          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    CASE            reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    DEFAULT         reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    COMMA           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    AND             reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    OR              reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    NOT             reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    LBRACE          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    COLON           reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)
    PERIOD          reduce using rule 31 (value -> VARIABLE LBRACKET RBRACKET .)


state 116

    (32) value -> VARIABLE LBRACKET value . RBRACKET
    (154) map_assign -> VARIABLE LBRACKET value . RBRACKET ASSIGN value

    RBRACKET        shift and go to state 178


state 117

    (148) array_assign -> VARIABLE LBRACKET INT . RBRACKET ASSIGN value
    (35) not_variable_value -> INT .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 179

  ! RBRACKET        [ reduce using rule 35 (not_variable_value -> INT .) ]


state 118

    (158) slice_structure -> VARIABLE ASSIGN append_statement .

    SEMICOLON       reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    PRINT           reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    PRINTF          reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    INPUT           reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    LPAREN          reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    FUNCTION        reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    VAR             reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    VARIABLE        reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    CONST           reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    TYPE            reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    IF              reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    SWITCH          reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    CHARSTRING      reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    INT             reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    FLOAT           reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    FOR             reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    $end            reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    RBRACE          reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    RETURN          reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    CASE            reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)
    DEFAULT         reduce using rule 158 (slice_structure -> VARIABLE ASSIGN append_statement .)


state 119

    (159) append_statement -> APPEND . LPAREN VARIABLE COMMA values RPAREN
    (160) append_statement -> APPEND . LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN

    LPAREN          shift and go to state 180


state 120

    (16) main -> FUNCTION MAIN LPAREN . RPAREN

    RPAREN          shift and go to state 181


state 121

    (66) function -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE blocks RBRACE
    (67) function -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE RBRACE
    (68) function -> FUNCTION VARIABLE LPAREN . RPAREN type LBRACE blocks return RBRACE
    (69) function -> FUNCTION VARIABLE LPAREN . RPAREN type LBRACE return RBRACE
    (70) function -> FUNCTION VARIABLE LPAREN . parameters RPAREN LBRACE blocks RBRACE
    (71) function -> FUNCTION VARIABLE LPAREN . parameters RPAREN LBRACE RBRACE
    (72) function -> FUNCTION VARIABLE LPAREN . parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> FUNCTION VARIABLE LPAREN . parameters RPAREN type LBRACE return RBRACE
    (56) parameters -> . VARIABLE type
    (57) parameters -> . VARIABLE type COMMA parameters

    RPAREN          shift and go to state 183
    VARIABLE        shift and go to state 182

    parameters                     shift and go to state 184

state 122

    (77) print_statement -> PRINT LPAREN values . RPAREN

    RPAREN          shift and go to state 185


state 123

    (80) print_statement -> PRINT LPAREN RPAREN .

    SEMICOLON       reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    PRINT           reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    PRINTF          reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    INPUT           reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    LPAREN          reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    FUNCTION        reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    VAR             reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    VARIABLE        reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    CONST           reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    TYPE            reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    IF              reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    SWITCH          reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    CHARSTRING      reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    INT             reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    FLOAT           reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    FOR             reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    $end            reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    RBRACE          reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    RETURN          reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    CASE            reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)
    DEFAULT         reduce using rule 80 (print_statement -> PRINT LPAREN RPAREN .)


state 124

    (79) print_statement -> PRINT LPAREN operation . RPAREN

    RPAREN          shift and go to state 186


state 125

    (37) values -> value .
    (38) values -> value . COMMA values
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    RPAREN          reduce using rule 37 (values -> value .)
    COMMA           shift and go to state 187
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 126

    (78) print_statement -> PRINTF LPAREN FORMATSTRING . COMMA values RPAREN

    COMMA           shift and go to state 188


state 127

    (81) input_statement -> INPUT LPAREN values . RPAREN

    RPAREN          shift and go to state 189


state 128

    (83) input_statement -> INPUT LPAREN RPAREN .

    SEMICOLON       reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    PRINT           reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    PRINTF          reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    INPUT           reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    LPAREN          reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    FUNCTION        reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    VAR             reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    VARIABLE        reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    CONST           reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    TYPE            reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    IF              reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    SWITCH          reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    CHARSTRING      reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    INT             reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    FLOAT           reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    FOR             reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    $end            reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    RBRACE          reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    RETURN          reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    CASE            reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)
    DEFAULT         reduce using rule 83 (input_statement -> INPUT LPAREN RPAREN .)


state 129

    (82) input_statement -> INPUT LPAREN operation . RPAREN

    RPAREN          shift and go to state 190


state 130

    (84) operation -> value operator value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    SEMICOLON       reduce using rule 84 (operation -> value operator value .)
    PRINT           reduce using rule 84 (operation -> value operator value .)
    PRINTF          reduce using rule 84 (operation -> value operator value .)
    INPUT           reduce using rule 84 (operation -> value operator value .)
    LPAREN          reduce using rule 84 (operation -> value operator value .)
    FUNCTION        reduce using rule 84 (operation -> value operator value .)
    VAR             reduce using rule 84 (operation -> value operator value .)
    VARIABLE        reduce using rule 84 (operation -> value operator value .)
    CONST           reduce using rule 84 (operation -> value operator value .)
    TYPE            reduce using rule 84 (operation -> value operator value .)
    IF              reduce using rule 84 (operation -> value operator value .)
    SWITCH          reduce using rule 84 (operation -> value operator value .)
    CHARSTRING      reduce using rule 84 (operation -> value operator value .)
    INT             reduce using rule 84 (operation -> value operator value .)
    FLOAT           reduce using rule 84 (operation -> value operator value .)
    FOR             reduce using rule 84 (operation -> value operator value .)
    $end            reduce using rule 84 (operation -> value operator value .)
    RBRACE          reduce using rule 84 (operation -> value operator value .)
    RETURN          reduce using rule 84 (operation -> value operator value .)
    CASE            reduce using rule 84 (operation -> value operator value .)
    DEFAULT         reduce using rule 84 (operation -> value operator value .)
    RPAREN          reduce using rule 84 (operation -> value operator value .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 131

    (85) operation -> value operator LPAREN . value RPAREN
    (91) operation -> value operator LPAREN . operation RPAREN
    (86) operation -> LPAREN . value RPAREN operator value
    (87) operation -> LPAREN . value operator value RPAREN
    (89) operation -> LPAREN . value operator operation RPAREN
    (90) operation -> LPAREN . value RPAREN operator operation
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 191
    operation                      shift and go to state 192
    not_variable_value             shift and go to state 36

state 132

    (88) operation -> value operator operation .

    SEMICOLON       reduce using rule 88 (operation -> value operator operation .)
    PRINT           reduce using rule 88 (operation -> value operator operation .)
    PRINTF          reduce using rule 88 (operation -> value operator operation .)
    INPUT           reduce using rule 88 (operation -> value operator operation .)
    LPAREN          reduce using rule 88 (operation -> value operator operation .)
    FUNCTION        reduce using rule 88 (operation -> value operator operation .)
    VAR             reduce using rule 88 (operation -> value operator operation .)
    VARIABLE        reduce using rule 88 (operation -> value operator operation .)
    CONST           reduce using rule 88 (operation -> value operator operation .)
    TYPE            reduce using rule 88 (operation -> value operator operation .)
    IF              reduce using rule 88 (operation -> value operator operation .)
    SWITCH          reduce using rule 88 (operation -> value operator operation .)
    CHARSTRING      reduce using rule 88 (operation -> value operator operation .)
    INT             reduce using rule 88 (operation -> value operator operation .)
    FLOAT           reduce using rule 88 (operation -> value operator operation .)
    FOR             reduce using rule 88 (operation -> value operator operation .)
    $end            reduce using rule 88 (operation -> value operator operation .)
    RBRACE          reduce using rule 88 (operation -> value operator operation .)
    RETURN          reduce using rule 88 (operation -> value operator operation .)
    CASE            reduce using rule 88 (operation -> value operator operation .)
    DEFAULT         reduce using rule 88 (operation -> value operator operation .)
    RPAREN          reduce using rule 88 (operation -> value operator operation .)


state 133

    (39) variable_declaration -> VAR variables type .
    (40) variable_declaration -> VAR variables type . ASSIGN value
    (41) variable_declaration -> VAR variables type . ASSIGN operation

    SEMICOLON       reduce using rule 39 (variable_declaration -> VAR variables type .)
    PRINT           reduce using rule 39 (variable_declaration -> VAR variables type .)
    PRINTF          reduce using rule 39 (variable_declaration -> VAR variables type .)
    INPUT           reduce using rule 39 (variable_declaration -> VAR variables type .)
    LPAREN          reduce using rule 39 (variable_declaration -> VAR variables type .)
    FUNCTION        reduce using rule 39 (variable_declaration -> VAR variables type .)
    VAR             reduce using rule 39 (variable_declaration -> VAR variables type .)
    VARIABLE        reduce using rule 39 (variable_declaration -> VAR variables type .)
    CONST           reduce using rule 39 (variable_declaration -> VAR variables type .)
    TYPE            reduce using rule 39 (variable_declaration -> VAR variables type .)
    IF              reduce using rule 39 (variable_declaration -> VAR variables type .)
    SWITCH          reduce using rule 39 (variable_declaration -> VAR variables type .)
    CHARSTRING      reduce using rule 39 (variable_declaration -> VAR variables type .)
    INT             reduce using rule 39 (variable_declaration -> VAR variables type .)
    FLOAT           reduce using rule 39 (variable_declaration -> VAR variables type .)
    FOR             reduce using rule 39 (variable_declaration -> VAR variables type .)
    $end            reduce using rule 39 (variable_declaration -> VAR variables type .)
    RBRACE          reduce using rule 39 (variable_declaration -> VAR variables type .)
    RETURN          reduce using rule 39 (variable_declaration -> VAR variables type .)
    CASE            reduce using rule 39 (variable_declaration -> VAR variables type .)
    DEFAULT         reduce using rule 39 (variable_declaration -> VAR variables type .)
    ASSIGN          shift and go to state 193


state 134

    (58) type -> INT .

    ASSIGN          reduce using rule 58 (type -> INT .)
    SEMICOLON       reduce using rule 58 (type -> INT .)
    PRINT           reduce using rule 58 (type -> INT .)
    PRINTF          reduce using rule 58 (type -> INT .)
    INPUT           reduce using rule 58 (type -> INT .)
    LPAREN          reduce using rule 58 (type -> INT .)
    FUNCTION        reduce using rule 58 (type -> INT .)
    VAR             reduce using rule 58 (type -> INT .)
    VARIABLE        reduce using rule 58 (type -> INT .)
    CONST           reduce using rule 58 (type -> INT .)
    TYPE            reduce using rule 58 (type -> INT .)
    IF              reduce using rule 58 (type -> INT .)
    SWITCH          reduce using rule 58 (type -> INT .)
    CHARSTRING      reduce using rule 58 (type -> INT .)
    INT             reduce using rule 58 (type -> INT .)
    FLOAT           reduce using rule 58 (type -> INT .)
    FOR             reduce using rule 58 (type -> INT .)
    $end            reduce using rule 58 (type -> INT .)
    RBRACE          reduce using rule 58 (type -> INT .)
    RETURN          reduce using rule 58 (type -> INT .)
    CASE            reduce using rule 58 (type -> INT .)
    DEFAULT         reduce using rule 58 (type -> INT .)
    RBRACKET        reduce using rule 58 (type -> INT .)
    LBRACE          reduce using rule 58 (type -> INT .)
    COMMA           reduce using rule 58 (type -> INT .)
    RPAREN          reduce using rule 58 (type -> INT .)


state 135

    (59) type -> INT32 .

    ASSIGN          reduce using rule 59 (type -> INT32 .)
    SEMICOLON       reduce using rule 59 (type -> INT32 .)
    PRINT           reduce using rule 59 (type -> INT32 .)
    PRINTF          reduce using rule 59 (type -> INT32 .)
    INPUT           reduce using rule 59 (type -> INT32 .)
    LPAREN          reduce using rule 59 (type -> INT32 .)
    FUNCTION        reduce using rule 59 (type -> INT32 .)
    VAR             reduce using rule 59 (type -> INT32 .)
    VARIABLE        reduce using rule 59 (type -> INT32 .)
    CONST           reduce using rule 59 (type -> INT32 .)
    TYPE            reduce using rule 59 (type -> INT32 .)
    IF              reduce using rule 59 (type -> INT32 .)
    SWITCH          reduce using rule 59 (type -> INT32 .)
    CHARSTRING      reduce using rule 59 (type -> INT32 .)
    INT             reduce using rule 59 (type -> INT32 .)
    FLOAT           reduce using rule 59 (type -> INT32 .)
    FOR             reduce using rule 59 (type -> INT32 .)
    $end            reduce using rule 59 (type -> INT32 .)
    RBRACE          reduce using rule 59 (type -> INT32 .)
    RETURN          reduce using rule 59 (type -> INT32 .)
    CASE            reduce using rule 59 (type -> INT32 .)
    DEFAULT         reduce using rule 59 (type -> INT32 .)
    RBRACKET        reduce using rule 59 (type -> INT32 .)
    LBRACE          reduce using rule 59 (type -> INT32 .)
    COMMA           reduce using rule 59 (type -> INT32 .)
    RPAREN          reduce using rule 59 (type -> INT32 .)


state 136

    (60) type -> INT64 .

    ASSIGN          reduce using rule 60 (type -> INT64 .)
    SEMICOLON       reduce using rule 60 (type -> INT64 .)
    PRINT           reduce using rule 60 (type -> INT64 .)
    PRINTF          reduce using rule 60 (type -> INT64 .)
    INPUT           reduce using rule 60 (type -> INT64 .)
    LPAREN          reduce using rule 60 (type -> INT64 .)
    FUNCTION        reduce using rule 60 (type -> INT64 .)
    VAR             reduce using rule 60 (type -> INT64 .)
    VARIABLE        reduce using rule 60 (type -> INT64 .)
    CONST           reduce using rule 60 (type -> INT64 .)
    TYPE            reduce using rule 60 (type -> INT64 .)
    IF              reduce using rule 60 (type -> INT64 .)
    SWITCH          reduce using rule 60 (type -> INT64 .)
    CHARSTRING      reduce using rule 60 (type -> INT64 .)
    INT             reduce using rule 60 (type -> INT64 .)
    FLOAT           reduce using rule 60 (type -> INT64 .)
    FOR             reduce using rule 60 (type -> INT64 .)
    $end            reduce using rule 60 (type -> INT64 .)
    RBRACE          reduce using rule 60 (type -> INT64 .)
    RETURN          reduce using rule 60 (type -> INT64 .)
    CASE            reduce using rule 60 (type -> INT64 .)
    DEFAULT         reduce using rule 60 (type -> INT64 .)
    RBRACKET        reduce using rule 60 (type -> INT64 .)
    LBRACE          reduce using rule 60 (type -> INT64 .)
    COMMA           reduce using rule 60 (type -> INT64 .)
    RPAREN          reduce using rule 60 (type -> INT64 .)


state 137

    (61) type -> STRING .

    ASSIGN          reduce using rule 61 (type -> STRING .)
    SEMICOLON       reduce using rule 61 (type -> STRING .)
    PRINT           reduce using rule 61 (type -> STRING .)
    PRINTF          reduce using rule 61 (type -> STRING .)
    INPUT           reduce using rule 61 (type -> STRING .)
    LPAREN          reduce using rule 61 (type -> STRING .)
    FUNCTION        reduce using rule 61 (type -> STRING .)
    VAR             reduce using rule 61 (type -> STRING .)
    VARIABLE        reduce using rule 61 (type -> STRING .)
    CONST           reduce using rule 61 (type -> STRING .)
    TYPE            reduce using rule 61 (type -> STRING .)
    IF              reduce using rule 61 (type -> STRING .)
    SWITCH          reduce using rule 61 (type -> STRING .)
    CHARSTRING      reduce using rule 61 (type -> STRING .)
    INT             reduce using rule 61 (type -> STRING .)
    FLOAT           reduce using rule 61 (type -> STRING .)
    FOR             reduce using rule 61 (type -> STRING .)
    $end            reduce using rule 61 (type -> STRING .)
    RBRACE          reduce using rule 61 (type -> STRING .)
    RETURN          reduce using rule 61 (type -> STRING .)
    CASE            reduce using rule 61 (type -> STRING .)
    DEFAULT         reduce using rule 61 (type -> STRING .)
    RBRACKET        reduce using rule 61 (type -> STRING .)
    LBRACE          reduce using rule 61 (type -> STRING .)
    COMMA           reduce using rule 61 (type -> STRING .)
    RPAREN          reduce using rule 61 (type -> STRING .)


state 138

    (62) type -> FLOAT .

    ASSIGN          reduce using rule 62 (type -> FLOAT .)
    SEMICOLON       reduce using rule 62 (type -> FLOAT .)
    PRINT           reduce using rule 62 (type -> FLOAT .)
    PRINTF          reduce using rule 62 (type -> FLOAT .)
    INPUT           reduce using rule 62 (type -> FLOAT .)
    LPAREN          reduce using rule 62 (type -> FLOAT .)
    FUNCTION        reduce using rule 62 (type -> FLOAT .)
    VAR             reduce using rule 62 (type -> FLOAT .)
    VARIABLE        reduce using rule 62 (type -> FLOAT .)
    CONST           reduce using rule 62 (type -> FLOAT .)
    TYPE            reduce using rule 62 (type -> FLOAT .)
    IF              reduce using rule 62 (type -> FLOAT .)
    SWITCH          reduce using rule 62 (type -> FLOAT .)
    CHARSTRING      reduce using rule 62 (type -> FLOAT .)
    INT             reduce using rule 62 (type -> FLOAT .)
    FLOAT           reduce using rule 62 (type -> FLOAT .)
    FOR             reduce using rule 62 (type -> FLOAT .)
    $end            reduce using rule 62 (type -> FLOAT .)
    RBRACE          reduce using rule 62 (type -> FLOAT .)
    RETURN          reduce using rule 62 (type -> FLOAT .)
    CASE            reduce using rule 62 (type -> FLOAT .)
    DEFAULT         reduce using rule 62 (type -> FLOAT .)
    RBRACKET        reduce using rule 62 (type -> FLOAT .)
    LBRACE          reduce using rule 62 (type -> FLOAT .)
    COMMA           reduce using rule 62 (type -> FLOAT .)
    RPAREN          reduce using rule 62 (type -> FLOAT .)


state 139

    (63) type -> FLOAT32 .

    ASSIGN          reduce using rule 63 (type -> FLOAT32 .)
    SEMICOLON       reduce using rule 63 (type -> FLOAT32 .)
    PRINT           reduce using rule 63 (type -> FLOAT32 .)
    PRINTF          reduce using rule 63 (type -> FLOAT32 .)
    INPUT           reduce using rule 63 (type -> FLOAT32 .)
    LPAREN          reduce using rule 63 (type -> FLOAT32 .)
    FUNCTION        reduce using rule 63 (type -> FLOAT32 .)
    VAR             reduce using rule 63 (type -> FLOAT32 .)
    VARIABLE        reduce using rule 63 (type -> FLOAT32 .)
    CONST           reduce using rule 63 (type -> FLOAT32 .)
    TYPE            reduce using rule 63 (type -> FLOAT32 .)
    IF              reduce using rule 63 (type -> FLOAT32 .)
    SWITCH          reduce using rule 63 (type -> FLOAT32 .)
    CHARSTRING      reduce using rule 63 (type -> FLOAT32 .)
    INT             reduce using rule 63 (type -> FLOAT32 .)
    FLOAT           reduce using rule 63 (type -> FLOAT32 .)
    FOR             reduce using rule 63 (type -> FLOAT32 .)
    $end            reduce using rule 63 (type -> FLOAT32 .)
    RBRACE          reduce using rule 63 (type -> FLOAT32 .)
    RETURN          reduce using rule 63 (type -> FLOAT32 .)
    CASE            reduce using rule 63 (type -> FLOAT32 .)
    DEFAULT         reduce using rule 63 (type -> FLOAT32 .)
    RBRACKET        reduce using rule 63 (type -> FLOAT32 .)
    LBRACE          reduce using rule 63 (type -> FLOAT32 .)
    COMMA           reduce using rule 63 (type -> FLOAT32 .)
    RPAREN          reduce using rule 63 (type -> FLOAT32 .)


state 140

    (64) type -> FLOAT64 .

    ASSIGN          reduce using rule 64 (type -> FLOAT64 .)
    SEMICOLON       reduce using rule 64 (type -> FLOAT64 .)
    PRINT           reduce using rule 64 (type -> FLOAT64 .)
    PRINTF          reduce using rule 64 (type -> FLOAT64 .)
    INPUT           reduce using rule 64 (type -> FLOAT64 .)
    LPAREN          reduce using rule 64 (type -> FLOAT64 .)
    FUNCTION        reduce using rule 64 (type -> FLOAT64 .)
    VAR             reduce using rule 64 (type -> FLOAT64 .)
    VARIABLE        reduce using rule 64 (type -> FLOAT64 .)
    CONST           reduce using rule 64 (type -> FLOAT64 .)
    TYPE            reduce using rule 64 (type -> FLOAT64 .)
    IF              reduce using rule 64 (type -> FLOAT64 .)
    SWITCH          reduce using rule 64 (type -> FLOAT64 .)
    CHARSTRING      reduce using rule 64 (type -> FLOAT64 .)
    INT             reduce using rule 64 (type -> FLOAT64 .)
    FLOAT           reduce using rule 64 (type -> FLOAT64 .)
    FOR             reduce using rule 64 (type -> FLOAT64 .)
    $end            reduce using rule 64 (type -> FLOAT64 .)
    RBRACE          reduce using rule 64 (type -> FLOAT64 .)
    RETURN          reduce using rule 64 (type -> FLOAT64 .)
    CASE            reduce using rule 64 (type -> FLOAT64 .)
    DEFAULT         reduce using rule 64 (type -> FLOAT64 .)
    RBRACKET        reduce using rule 64 (type -> FLOAT64 .)
    LBRACE          reduce using rule 64 (type -> FLOAT64 .)
    COMMA           reduce using rule 64 (type -> FLOAT64 .)
    RPAREN          reduce using rule 64 (type -> FLOAT64 .)


state 141

    (65) type -> BOOL .

    ASSIGN          reduce using rule 65 (type -> BOOL .)
    SEMICOLON       reduce using rule 65 (type -> BOOL .)
    PRINT           reduce using rule 65 (type -> BOOL .)
    PRINTF          reduce using rule 65 (type -> BOOL .)
    INPUT           reduce using rule 65 (type -> BOOL .)
    LPAREN          reduce using rule 65 (type -> BOOL .)
    FUNCTION        reduce using rule 65 (type -> BOOL .)
    VAR             reduce using rule 65 (type -> BOOL .)
    VARIABLE        reduce using rule 65 (type -> BOOL .)
    CONST           reduce using rule 65 (type -> BOOL .)
    TYPE            reduce using rule 65 (type -> BOOL .)
    IF              reduce using rule 65 (type -> BOOL .)
    SWITCH          reduce using rule 65 (type -> BOOL .)
    CHARSTRING      reduce using rule 65 (type -> BOOL .)
    INT             reduce using rule 65 (type -> BOOL .)
    FLOAT           reduce using rule 65 (type -> BOOL .)
    FOR             reduce using rule 65 (type -> BOOL .)
    $end            reduce using rule 65 (type -> BOOL .)
    RBRACE          reduce using rule 65 (type -> BOOL .)
    RETURN          reduce using rule 65 (type -> BOOL .)
    CASE            reduce using rule 65 (type -> BOOL .)
    DEFAULT         reduce using rule 65 (type -> BOOL .)
    RBRACKET        reduce using rule 65 (type -> BOOL .)
    LBRACE          reduce using rule 65 (type -> BOOL .)
    COMMA           reduce using rule 65 (type -> BOOL .)
    RPAREN          reduce using rule 65 (type -> BOOL .)


state 142

    (145) array_structure -> VAR VARIABLE LBRACKET . INT RBRACKET type
    (147) array_structure -> VAR VARIABLE LBRACKET . INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (156) slice_structure -> VAR VARIABLE LBRACKET . RBRACKET type

    INT             shift and go to state 194
    RBRACKET        shift and go to state 195


state 143

    (146) array_structure -> VAR VARIABLE ASSIGN . LBRACKET INT RBRACKET type LBRACE values RBRACE

    LBRACKET        shift and go to state 196


state 144

    (29) variables -> VARIABLE COMMA . variables
    (28) variables -> . VARIABLE
    (29) variables -> . VARIABLE COMMA variables

    VARIABLE        shift and go to state 197

    variables                      shift and go to state 198

state 145

    (44) variable_declaration -> CONST VARIABLE ASSIGN . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 199
    not_variable_value             shift and go to state 36

state 146

    (141) struct_structure -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 200


state 147

    (103) conditional_structure -> IF conditions conditional_body .
    (104) conditional_structure -> IF conditions conditional_body . ELSE conditional_body
    (105) conditional_structure -> IF conditions conditional_body . ELSE IF conditions conditional_body ELSE conditional_body

    SEMICOLON       reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    PRINT           reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    PRINTF          reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    INPUT           reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    LPAREN          reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    FUNCTION        reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    VAR             reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    VARIABLE        reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    CONST           reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    TYPE            reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    IF              reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    SWITCH          reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    CHARSTRING      reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    INT             reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    FLOAT           reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    FOR             reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    $end            reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    RBRACE          reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    RETURN          reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    CASE            reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    DEFAULT         reduce using rule 103 (conditional_structure -> IF conditions conditional_body .)
    ELSE            shift and go to state 201


state 148

    (106) conditional_body -> LBRACE . statement RBRACE
    (107) conditional_body -> LBRACE . statement return RBRACE
    (108) conditional_body -> LBRACE . return RBRACE
    (109) conditional_body -> LBRACE . BREAK RBRACE
    (110) conditional_body -> LBRACE . CONTINUE RBRACE
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    BREAK           shift and go to state 204
    CONTINUE        shift and go to state 205
    RETURN          shift and go to state 206
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 202
    return                         shift and go to state 203
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    value                          shift and go to state 24
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 149

    (112) conditions -> condition logical_operator . conditions
    (111) conditions -> . condition
    (112) conditions -> . condition logical_operator conditions
    (113) condition -> . value relational_operator value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    condition                      shift and go to state 90
    conditions                     shift and go to state 207
    value                          shift and go to state 91
    not_variable_value             shift and go to state 36

state 150

    (114) logical_operator -> AND .

    VARIABLE        reduce using rule 114 (logical_operator -> AND .)
    CHARSTRING      reduce using rule 114 (logical_operator -> AND .)
    INT             reduce using rule 114 (logical_operator -> AND .)
    FLOAT           reduce using rule 114 (logical_operator -> AND .)


state 151

    (115) logical_operator -> OR .

    VARIABLE        reduce using rule 115 (logical_operator -> OR .)
    CHARSTRING      reduce using rule 115 (logical_operator -> OR .)
    INT             reduce using rule 115 (logical_operator -> OR .)
    FLOAT           reduce using rule 115 (logical_operator -> OR .)


state 152

    (116) logical_operator -> NOT .

    VARIABLE        reduce using rule 116 (logical_operator -> NOT .)
    CHARSTRING      reduce using rule 116 (logical_operator -> NOT .)
    INT             reduce using rule 116 (logical_operator -> NOT .)
    FLOAT           reduce using rule 116 (logical_operator -> NOT .)


state 153

    (113) condition -> value relational_operator . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 208
    not_variable_value             shift and go to state 36

state 154

    (117) relational_operator -> GREATER .

    VARIABLE        reduce using rule 117 (relational_operator -> GREATER .)
    CHARSTRING      reduce using rule 117 (relational_operator -> GREATER .)
    INT             reduce using rule 117 (relational_operator -> GREATER .)
    FLOAT           reduce using rule 117 (relational_operator -> GREATER .)


state 155

    (118) relational_operator -> LESS .

    VARIABLE        reduce using rule 118 (relational_operator -> LESS .)
    CHARSTRING      reduce using rule 118 (relational_operator -> LESS .)
    INT             reduce using rule 118 (relational_operator -> LESS .)
    FLOAT           reduce using rule 118 (relational_operator -> LESS .)


state 156

    (119) relational_operator -> GREATEREQUALS .

    VARIABLE        reduce using rule 119 (relational_operator -> GREATEREQUALS .)
    CHARSTRING      reduce using rule 119 (relational_operator -> GREATEREQUALS .)
    INT             reduce using rule 119 (relational_operator -> GREATEREQUALS .)
    FLOAT           reduce using rule 119 (relational_operator -> GREATEREQUALS .)


state 157

    (120) relational_operator -> LESSEQUALS .

    VARIABLE        reduce using rule 120 (relational_operator -> LESSEQUALS .)
    CHARSTRING      reduce using rule 120 (relational_operator -> LESSEQUALS .)
    INT             reduce using rule 120 (relational_operator -> LESSEQUALS .)
    FLOAT           reduce using rule 120 (relational_operator -> LESSEQUALS .)


state 158

    (121) relational_operator -> EQUALS .

    VARIABLE        reduce using rule 121 (relational_operator -> EQUALS .)
    CHARSTRING      reduce using rule 121 (relational_operator -> EQUALS .)
    INT             reduce using rule 121 (relational_operator -> EQUALS .)
    FLOAT           reduce using rule 121 (relational_operator -> EQUALS .)


state 159

    (122) relational_operator -> DIFFERENT .

    VARIABLE        reduce using rule 122 (relational_operator -> DIFFERENT .)
    CHARSTRING      reduce using rule 122 (relational_operator -> DIFFERENT .)
    INT             reduce using rule 122 (relational_operator -> DIFFERENT .)
    FLOAT           reduce using rule 122 (relational_operator -> DIFFERENT .)


state 160

    (129) switch_structure -> SWITCH switch_expression LBRACE . case_blocks RBRACE
    (132) case_blocks -> . case_block
    (133) case_blocks -> . case_block case_blocks
    (134) case_block -> . CASE values COLON statement
    (135) case_block -> . DEFAULT COLON statement

    CASE            shift and go to state 211
    DEFAULT         shift and go to state 212

    case_blocks                    shift and go to state 209
    case_block                     shift and go to state 210

state 161

    (130) switch_expression -> VARIABLE SHORTASSIGN . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 213
    not_variable_value             shift and go to state 36

state 162

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN . value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 214
    not_variable_value             shift and go to state 36

state 163

    (128) for_iterator -> FOR VARIABLE COMMA . VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    VARIABLE        shift and go to state 215


state 164

    (127) for_infinite_bucle -> FOR LBRACE statement . RBRACE

    RBRACE          shift and go to state 216


state 165

    (7) statement -> import main LBRACE blocks . RBRACE

    RBRACE          shift and go to state 217


state 166

    (8) statement -> package import main LBRACE . blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 218
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 167

    (6) statement -> package main LBRACE blocks . RBRACE

    RBRACE          shift and go to state 219


state 168

    (5) statement -> main LBRACE blocks RBRACE .

    $end            reduce using rule 5 (statement -> main LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 5 (statement -> main LBRACE blocks RBRACE .)
    RETURN          reduce using rule 5 (statement -> main LBRACE blocks RBRACE .)
    CASE            reduce using rule 5 (statement -> main LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 5 (statement -> main LBRACE blocks RBRACE .)


state 169

    (11) import -> IMPORT LPAREN values_for_import RPAREN .

    FUNCTION        reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    PRINT           reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    PRINTF          reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    INPUT           reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    LPAREN          reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    VAR             reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    VARIABLE        reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    CONST           reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    TYPE            reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    IF              reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    SWITCH          reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    CHARSTRING      reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    INT             reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    FLOAT           reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)
    FOR             reduce using rule 11 (import -> IMPORT LPAREN values_for_import RPAREN .)


state 170

    (13) values_for_import -> CHARSTRING values_for_import .

    RPAREN          reduce using rule 13 (values_for_import -> CHARSTRING values_for_import .)


state 171

    (86) operation -> LPAREN value RPAREN operator . value
    (90) operation -> LPAREN value RPAREN operator . operation
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 220
    operation                      shift and go to state 221
    not_variable_value             shift and go to state 36

state 172

    (87) operation -> LPAREN value operator value . RPAREN
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    RPAREN          shift and go to state 222
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 173

    (89) operation -> LPAREN value operator operation . RPAREN

    RPAREN          shift and go to state 223


state 174

    (32) value -> VARIABLE LBRACKET value . RBRACKET

    RBRACKET        shift and go to state 224


state 175

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET . type RBRACKET type LBRACE map_values RBRACE
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 225

state 176

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET . type LBRACE values RBRACE
    (157) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET . type
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 226

state 177

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN

    MAP             shift and go to state 227


state 178

    (32) value -> VARIABLE LBRACKET value RBRACKET .
    (154) map_assign -> VARIABLE LBRACKET value RBRACKET . ASSIGN value

  ! shift/reduce conflict for ASSIGN resolved as shift
    PLUS            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    MINUS           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    TIMES           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DIVIDE          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    INCREMENT       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DECREMENT       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    ASSIGN          shift and go to state 228

  ! ASSIGN          [ reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .) ]


state 179

    (148) array_assign -> VARIABLE LBRACKET INT RBRACKET . ASSIGN value

    ASSIGN          shift and go to state 229


state 180

    (159) append_statement -> APPEND LPAREN . VARIABLE COMMA values RPAREN
    (160) append_statement -> APPEND LPAREN . VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN

    VARIABLE        shift and go to state 230


state 181

    (16) main -> FUNCTION MAIN LPAREN RPAREN .

    LBRACE          reduce using rule 16 (main -> FUNCTION MAIN LPAREN RPAREN .)


state 182

    (56) parameters -> VARIABLE . type
    (57) parameters -> VARIABLE . type COMMA parameters
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 231

state 183

    (66) function -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE blocks RBRACE
    (67) function -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE RBRACE
    (68) function -> FUNCTION VARIABLE LPAREN RPAREN . type LBRACE blocks return RBRACE
    (69) function -> FUNCTION VARIABLE LPAREN RPAREN . type LBRACE return RBRACE
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    LBRACE          shift and go to state 232
    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 233

state 184

    (70) function -> FUNCTION VARIABLE LPAREN parameters . RPAREN LBRACE blocks RBRACE
    (71) function -> FUNCTION VARIABLE LPAREN parameters . RPAREN LBRACE RBRACE
    (72) function -> FUNCTION VARIABLE LPAREN parameters . RPAREN type LBRACE blocks return RBRACE
    (73) function -> FUNCTION VARIABLE LPAREN parameters . RPAREN type LBRACE return RBRACE

    RPAREN          shift and go to state 234


state 185

    (77) print_statement -> PRINT LPAREN values RPAREN .

    SEMICOLON       reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    PRINT           reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    PRINTF          reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    INPUT           reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    LPAREN          reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    FUNCTION        reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    VAR             reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    VARIABLE        reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    CONST           reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    TYPE            reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    IF              reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    SWITCH          reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    CHARSTRING      reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    INT             reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    FLOAT           reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    FOR             reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    $end            reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    RBRACE          reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    RETURN          reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    CASE            reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)
    DEFAULT         reduce using rule 77 (print_statement -> PRINT LPAREN values RPAREN .)


state 186

    (79) print_statement -> PRINT LPAREN operation RPAREN .

    SEMICOLON       reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    PRINT           reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    PRINTF          reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    INPUT           reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    LPAREN          reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    FUNCTION        reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    VAR             reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    VARIABLE        reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    CONST           reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    TYPE            reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    IF              reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    SWITCH          reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    CHARSTRING      reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    INT             reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    FLOAT           reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    FOR             reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    $end            reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    RBRACE          reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    RETURN          reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    CASE            reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)
    DEFAULT         reduce using rule 79 (print_statement -> PRINT LPAREN operation RPAREN .)


state 187

    (38) values -> value COMMA . values
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 235
    values                         shift and go to state 236
    not_variable_value             shift and go to state 36

state 188

    (78) print_statement -> PRINTF LPAREN FORMATSTRING COMMA . values RPAREN
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 237
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 189

    (81) input_statement -> INPUT LPAREN values RPAREN .

    SEMICOLON       reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    PRINT           reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    PRINTF          reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    INPUT           reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    LPAREN          reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    FUNCTION        reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    VAR             reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    VARIABLE        reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    CONST           reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    TYPE            reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    IF              reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    SWITCH          reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    CHARSTRING      reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    INT             reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    FLOAT           reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    FOR             reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    $end            reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    RBRACE          reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    RETURN          reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    CASE            reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)
    DEFAULT         reduce using rule 81 (input_statement -> INPUT LPAREN values RPAREN .)


state 190

    (82) input_statement -> INPUT LPAREN operation RPAREN .

    SEMICOLON       reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    PRINT           reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    PRINTF          reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    INPUT           reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    LPAREN          reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    FUNCTION        reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    VAR             reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    VARIABLE        reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    CONST           reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    TYPE            reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    IF              reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    SWITCH          reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    CHARSTRING      reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    INT             reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    FLOAT           reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    FOR             reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    $end            reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    RBRACE          reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    RETURN          reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    CASE            reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)
    DEFAULT         reduce using rule 82 (input_statement -> INPUT LPAREN operation RPAREN .)


state 191

    (85) operation -> value operator LPAREN value . RPAREN
    (86) operation -> LPAREN value . RPAREN operator value
    (87) operation -> LPAREN value . operator value RPAREN
    (89) operation -> LPAREN value . operator operation RPAREN
    (90) operation -> LPAREN value . RPAREN operator operation
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    RPAREN          shift and go to state 239
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 238
    double_operator                shift and go to state 79

state 192

    (91) operation -> value operator LPAREN operation . RPAREN

    RPAREN          shift and go to state 240


state 193

    (40) variable_declaration -> VAR variables type ASSIGN . value
    (41) variable_declaration -> VAR variables type ASSIGN . operation
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    LPAREN          shift and go to state 9
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 241
    operation                      shift and go to state 242
    not_variable_value             shift and go to state 36

state 194

    (145) array_structure -> VAR VARIABLE LBRACKET INT . RBRACKET type
    (147) array_structure -> VAR VARIABLE LBRACKET INT . RBRACKET type ASSIGN LBRACKET values RBRACKET

    RBRACKET        shift and go to state 243


state 195

    (156) slice_structure -> VAR VARIABLE LBRACKET RBRACKET . type
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 244

state 196

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET . INT RBRACKET type LBRACE values RBRACE

    INT             shift and go to state 245


state 197

    (28) variables -> VARIABLE .
    (29) variables -> VARIABLE . COMMA variables

    INT             reduce using rule 28 (variables -> VARIABLE .)
    INT32           reduce using rule 28 (variables -> VARIABLE .)
    INT64           reduce using rule 28 (variables -> VARIABLE .)
    STRING          reduce using rule 28 (variables -> VARIABLE .)
    FLOAT           reduce using rule 28 (variables -> VARIABLE .)
    FLOAT32         reduce using rule 28 (variables -> VARIABLE .)
    FLOAT64         reduce using rule 28 (variables -> VARIABLE .)
    BOOL            reduce using rule 28 (variables -> VARIABLE .)
    COMMA           shift and go to state 144


state 198

    (29) variables -> VARIABLE COMMA variables .

    INT             reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    INT32           reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    INT64           reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    STRING          reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    FLOAT           reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    FLOAT32         reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    FLOAT64         reduce using rule 29 (variables -> VARIABLE COMMA variables .)
    BOOL            reduce using rule 29 (variables -> VARIABLE COMMA variables .)


state 199

    (44) variable_declaration -> CONST VARIABLE ASSIGN value .

    SEMICOLON       reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    PRINT           reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    PRINTF          reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    INPUT           reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    LPAREN          reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    FUNCTION        reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    VAR             reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    VARIABLE        reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    CONST           reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    TYPE            reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    IF              reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    SWITCH          reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    CHARSTRING      reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    INT             reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    FLOAT           reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    FOR             reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    $end            reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    RBRACE          reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    RETURN          reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    CASE            reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)
    DEFAULT         reduce using rule 44 (variable_declaration -> CONST VARIABLE ASSIGN value .)


state 200

    (141) struct_structure -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (142) struct_fields -> . struct_field
    (143) struct_fields -> . struct_field struct_fields
    (144) struct_field -> . VARIABLE type

    VARIABLE        shift and go to state 246

    struct_fields                  shift and go to state 247
    struct_field                   shift and go to state 248

state 201

    (104) conditional_structure -> IF conditions conditional_body ELSE . conditional_body
    (105) conditional_structure -> IF conditions conditional_body ELSE . IF conditions conditional_body ELSE conditional_body
    (106) conditional_body -> . LBRACE statement RBRACE
    (107) conditional_body -> . LBRACE statement return RBRACE
    (108) conditional_body -> . LBRACE return RBRACE
    (109) conditional_body -> . LBRACE BREAK RBRACE
    (110) conditional_body -> . LBRACE CONTINUE RBRACE

    IF              shift and go to state 249
    LBRACE          shift and go to state 148

    conditional_body               shift and go to state 250

state 202

    (106) conditional_body -> LBRACE statement . RBRACE
    (107) conditional_body -> LBRACE statement . return RBRACE
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value

    RBRACE          shift and go to state 251
    RETURN          shift and go to state 206

    return                         shift and go to state 252

state 203

    (108) conditional_body -> LBRACE return . RBRACE

    RBRACE          shift and go to state 253


state 204

    (109) conditional_body -> LBRACE BREAK . RBRACE

    RBRACE          shift and go to state 254


state 205

    (110) conditional_body -> LBRACE CONTINUE . RBRACE

    RBRACE          shift and go to state 255


state 206

    (74) return -> RETURN . value
    (75) return -> RETURN . value LBRACKET value RBRACKET
    (76) return -> RETURN . value PERIOD value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 256
    not_variable_value             shift and go to state 36

state 207

    (112) conditions -> condition logical_operator conditions .

    LBRACE          reduce using rule 112 (conditions -> condition logical_operator conditions .)


state 208

    (113) condition -> value relational_operator value .

    AND             reduce using rule 113 (condition -> value relational_operator value .)
    OR              reduce using rule 113 (condition -> value relational_operator value .)
    NOT             reduce using rule 113 (condition -> value relational_operator value .)
    LBRACE          reduce using rule 113 (condition -> value relational_operator value .)
    SEMICOLON       reduce using rule 113 (condition -> value relational_operator value .)


state 209

    (129) switch_structure -> SWITCH switch_expression LBRACE case_blocks . RBRACE

    RBRACE          shift and go to state 257


state 210

    (132) case_blocks -> case_block .
    (133) case_blocks -> case_block . case_blocks
    (132) case_blocks -> . case_block
    (133) case_blocks -> . case_block case_blocks
    (134) case_block -> . CASE values COLON statement
    (135) case_block -> . DEFAULT COLON statement

    RBRACE          reduce using rule 132 (case_blocks -> case_block .)
    CASE            shift and go to state 211
    DEFAULT         shift and go to state 212

    case_block                     shift and go to state 210
    case_blocks                    shift and go to state 258

state 211

    (134) case_block -> CASE . values COLON statement
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 259
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 212

    (135) case_block -> DEFAULT . COLON statement

    COLON           shift and go to state 260


state 213

    (130) switch_expression -> VARIABLE SHORTASSIGN value .

    LBRACE          reduce using rule 130 (switch_expression -> VARIABLE SHORTASSIGN value .)


state 214

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value . SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE

    SEMICOLON       shift and go to state 261


state 215

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE . SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    SHORTASSIGN     shift and go to state 262


state 216

    (127) for_infinite_bucle -> FOR LBRACE statement RBRACE .

    SEMICOLON       reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    PRINT           reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    PRINTF          reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    INPUT           reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    LPAREN          reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    FUNCTION        reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    VAR             reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    VARIABLE        reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    CONST           reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    TYPE            reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    IF              reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    SWITCH          reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    CHARSTRING      reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    INT             reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    FLOAT           reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    FOR             reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    $end            reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    RBRACE          reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    RETURN          reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    CASE            reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)
    DEFAULT         reduce using rule 127 (for_infinite_bucle -> FOR LBRACE statement RBRACE .)


state 217

    (7) statement -> import main LBRACE blocks RBRACE .

    $end            reduce using rule 7 (statement -> import main LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 7 (statement -> import main LBRACE blocks RBRACE .)
    RETURN          reduce using rule 7 (statement -> import main LBRACE blocks RBRACE .)
    CASE            reduce using rule 7 (statement -> import main LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 7 (statement -> import main LBRACE blocks RBRACE .)


state 218

    (8) statement -> package import main LBRACE blocks . RBRACE

    RBRACE          shift and go to state 263


state 219

    (6) statement -> package main LBRACE blocks RBRACE .

    $end            reduce using rule 6 (statement -> package main LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 6 (statement -> package main LBRACE blocks RBRACE .)
    RETURN          reduce using rule 6 (statement -> package main LBRACE blocks RBRACE .)
    CASE            reduce using rule 6 (statement -> package main LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 6 (statement -> package main LBRACE blocks RBRACE .)


state 220

    (86) operation -> LPAREN value RPAREN operator value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    SEMICOLON       reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    PRINT           reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    PRINTF          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    INPUT           reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    LPAREN          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    FUNCTION        reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    VAR             reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    VARIABLE        reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    CONST           reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    TYPE            reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    IF              reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    SWITCH          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    CHARSTRING      reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    INT             reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    FLOAT           reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    FOR             reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    $end            reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    RBRACE          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    RETURN          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    CASE            reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    DEFAULT         reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    RPAREN          reduce using rule 86 (operation -> LPAREN value RPAREN operator value .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 221

    (90) operation -> LPAREN value RPAREN operator operation .

    SEMICOLON       reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    PRINT           reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    PRINTF          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    INPUT           reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    LPAREN          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    FUNCTION        reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    VAR             reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    VARIABLE        reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    CONST           reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    TYPE            reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    IF              reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    SWITCH          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    CHARSTRING      reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    INT             reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    FLOAT           reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    FOR             reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    $end            reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    RBRACE          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    RETURN          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    CASE            reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    DEFAULT         reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)
    RPAREN          reduce using rule 90 (operation -> LPAREN value RPAREN operator operation .)


state 222

    (87) operation -> LPAREN value operator value RPAREN .

    SEMICOLON       reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    PRINT           reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    PRINTF          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    INPUT           reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    LPAREN          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    FUNCTION        reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    VAR             reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    VARIABLE        reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    CONST           reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    TYPE            reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    IF              reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    SWITCH          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    CHARSTRING      reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    INT             reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    FLOAT           reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    FOR             reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    $end            reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    RBRACE          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    RETURN          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    CASE            reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    DEFAULT         reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)
    RPAREN          reduce using rule 87 (operation -> LPAREN value operator value RPAREN .)


state 223

    (89) operation -> LPAREN value operator operation RPAREN .

    SEMICOLON       reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    PRINT           reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    PRINTF          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    INPUT           reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    LPAREN          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    FUNCTION        reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    VAR             reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    VARIABLE        reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    CONST           reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    TYPE            reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    IF              reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    SWITCH          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    CHARSTRING      reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    INT             reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    FLOAT           reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    FOR             reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    $end            reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    RBRACE          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    RETURN          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    CASE            reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    DEFAULT         reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)
    RPAREN          reduce using rule 89 (operation -> LPAREN value operator operation RPAREN .)


state 224

    (32) value -> VARIABLE LBRACKET value RBRACKET .

    RPAREN          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    PLUS            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    MINUS           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    TIMES           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DIVIDE          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    ASSIGN          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    GREATER         reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    LESS            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    GREATEREQUALS   reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    LESSEQUALS      reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    EQUALS          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DIFFERENT       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    INCREMENT       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DECREMENT       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    SEMICOLON       reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    PRINT           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    PRINTF          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    INPUT           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    LPAREN          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    FUNCTION        reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    VAR             reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    VARIABLE        reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    CONST           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    TYPE            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    IF              reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    SWITCH          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    CHARSTRING      reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    INT             reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    FLOAT           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    FOR             reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    $end            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    RBRACE          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    RETURN          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    CASE            reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    DEFAULT         reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    RBRACKET        reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    COMMA           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    AND             reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    OR              reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    NOT             reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    LBRACE          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    COLON           reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    LBRACKET        reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)
    PERIOD          reduce using rule 32 (value -> VARIABLE LBRACKET value RBRACKET .)


state 225

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type . RBRACKET type LBRACE map_values RBRACE

    RBRACKET        shift and go to state 264


state 226

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type . LBRACE values RBRACE
    (157) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .

    LBRACE          shift and go to state 265
    SEMICOLON       reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    PRINT           reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    PRINTF          reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    INPUT           reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    LPAREN          reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    FUNCTION        reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    VAR             reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    CONST           reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    TYPE            reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    IF              reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    CHARSTRING      reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    INT             reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    FLOAT           reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    FOR             reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    $end            reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    RETURN          reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    CASE            reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 157 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type .)


state 227

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 266


state 228

    (154) map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 267
    not_variable_value             shift and go to state 36

state 229

    (148) array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 268
    not_variable_value             shift and go to state 36

state 230

    (159) append_statement -> APPEND LPAREN VARIABLE . COMMA values RPAREN
    (160) append_statement -> APPEND LPAREN VARIABLE . COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN

    COMMA           shift and go to state 269


state 231

    (56) parameters -> VARIABLE type .
    (57) parameters -> VARIABLE type . COMMA parameters

    RPAREN          reduce using rule 56 (parameters -> VARIABLE type .)
    COMMA           shift and go to state 270


state 232

    (66) function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . blocks RBRACE
    (67) function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    RBRACE          shift and go to state 272
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 271
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 233

    (68) function -> FUNCTION VARIABLE LPAREN RPAREN type . LBRACE blocks return RBRACE
    (69) function -> FUNCTION VARIABLE LPAREN RPAREN type . LBRACE return RBRACE

    LBRACE          shift and go to state 273


state 234

    (70) function -> FUNCTION VARIABLE LPAREN parameters RPAREN . LBRACE blocks RBRACE
    (71) function -> FUNCTION VARIABLE LPAREN parameters RPAREN . LBRACE RBRACE
    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN . type LBRACE blocks return RBRACE
    (73) function -> FUNCTION VARIABLE LPAREN parameters RPAREN . type LBRACE return RBRACE
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    LBRACE          shift and go to state 274
    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 275

state 235

    (37) values -> value .
    (38) values -> value . COMMA values

    RPAREN          reduce using rule 37 (values -> value .)
    COLON           reduce using rule 37 (values -> value .)
    RBRACE          reduce using rule 37 (values -> value .)
    RBRACKET        reduce using rule 37 (values -> value .)
    COMMA           shift and go to state 187


state 236

    (38) values -> value COMMA values .

    RPAREN          reduce using rule 38 (values -> value COMMA values .)
    COLON           reduce using rule 38 (values -> value COMMA values .)
    RBRACE          reduce using rule 38 (values -> value COMMA values .)
    RBRACKET        reduce using rule 38 (values -> value COMMA values .)


state 237

    (78) print_statement -> PRINTF LPAREN FORMATSTRING COMMA values . RPAREN

    RPAREN          shift and go to state 276


state 238

    (87) operation -> LPAREN value operator . value RPAREN
    (89) operation -> LPAREN value operator . operation RPAREN
    (84) operation -> value operator . value
    (85) operation -> value operator . LPAREN value RPAREN
    (88) operation -> value operator . operation
    (91) operation -> value operator . LPAREN operation RPAREN
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    LPAREN          shift and go to state 131
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 277
    operation                      shift and go to state 278
    not_variable_value             shift and go to state 36

state 239

    (85) operation -> value operator LPAREN value RPAREN .
    (86) operation -> LPAREN value RPAREN . operator value
    (90) operation -> LPAREN value RPAREN . operator operation
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN

    SEMICOLON       reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    PRINT           reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    PRINTF          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    INPUT           reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    LPAREN          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    FUNCTION        reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    VAR             reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    VARIABLE        reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    CONST           reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    TYPE            reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    IF              reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    SWITCH          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    CHARSTRING      reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    INT             reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    FLOAT           reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    FOR             reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    $end            reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    RBRACE          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    RETURN          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    CASE            reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    DEFAULT         reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    RPAREN          reduce using rule 85 (operation -> value operator LPAREN value RPAREN .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84

    operator                       shift and go to state 171

state 240

    (91) operation -> value operator LPAREN operation RPAREN .

    SEMICOLON       reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    PRINT           reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    PRINTF          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    INPUT           reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    LPAREN          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    FUNCTION        reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    VAR             reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    VARIABLE        reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    CONST           reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    TYPE            reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    IF              reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    SWITCH          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    CHARSTRING      reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    INT             reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    FLOAT           reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    FOR             reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    $end            reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    RBRACE          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    RETURN          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    CASE            reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    DEFAULT         reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)
    RPAREN          reduce using rule 91 (operation -> value operator LPAREN operation RPAREN .)


state 241

    (40) variable_declaration -> VAR variables type ASSIGN value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    SEMICOLON       reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    PRINT           reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    PRINTF          reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    INPUT           reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    LPAREN          reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    FUNCTION        reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    VAR             reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    VARIABLE        reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    CONST           reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    TYPE            reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    IF              reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    SWITCH          reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    CHARSTRING      reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    INT             reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    FLOAT           reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    FOR             reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    $end            reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    RBRACE          reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    RETURN          reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    CASE            reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    DEFAULT         reduce using rule 40 (variable_declaration -> VAR variables type ASSIGN value .)
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 242

    (41) variable_declaration -> VAR variables type ASSIGN operation .

    SEMICOLON       reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    PRINT           reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    PRINTF          reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    INPUT           reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    LPAREN          reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    FUNCTION        reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    VAR             reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    VARIABLE        reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    CONST           reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    TYPE            reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    IF              reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    SWITCH          reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    CHARSTRING      reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    INT             reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    FLOAT           reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    FOR             reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    $end            reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    RBRACE          reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    RETURN          reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    CASE            reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)
    DEFAULT         reduce using rule 41 (variable_declaration -> VAR variables type ASSIGN operation .)


state 243

    (145) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET . type
    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET . type ASSIGN LBRACKET values RBRACKET
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 279

state 244

    (156) slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .

    SEMICOLON       reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    PRINT           reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    PRINTF          reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    INPUT           reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    LPAREN          reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    FUNCTION        reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    VAR             reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    CONST           reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    TYPE            reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    IF              reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    CHARSTRING      reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    INT             reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    FLOAT           reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    FOR             reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    $end            reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    RETURN          reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    CASE            reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 156 (slice_structure -> VAR VARIABLE LBRACKET RBRACKET type .)


state 245

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT . RBRACKET type LBRACE values RBRACE

    RBRACKET        shift and go to state 280


state 246

    (144) struct_field -> VARIABLE . type
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 281

state 247

    (141) struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE

    RBRACE          shift and go to state 282


state 248

    (142) struct_fields -> struct_field .
    (143) struct_fields -> struct_field . struct_fields
    (142) struct_fields -> . struct_field
    (143) struct_fields -> . struct_field struct_fields
    (144) struct_field -> . VARIABLE type

    RBRACE          reduce using rule 142 (struct_fields -> struct_field .)
    VARIABLE        shift and go to state 246

    struct_field                   shift and go to state 248
    struct_fields                  shift and go to state 283

state 249

    (105) conditional_structure -> IF conditions conditional_body ELSE IF . conditions conditional_body ELSE conditional_body
    (111) conditions -> . condition
    (112) conditions -> . condition logical_operator conditions
    (113) condition -> . value relational_operator value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    conditions                     shift and go to state 284
    condition                      shift and go to state 90
    value                          shift and go to state 91
    not_variable_value             shift and go to state 36

state 250

    (104) conditional_structure -> IF conditions conditional_body ELSE conditional_body .

    SEMICOLON       reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    PRINT           reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    PRINTF          reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    INPUT           reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    LPAREN          reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    FUNCTION        reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    VAR             reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    VARIABLE        reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    CONST           reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    TYPE            reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    IF              reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    SWITCH          reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    CHARSTRING      reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    INT             reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    FLOAT           reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    FOR             reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    $end            reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    RBRACE          reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    RETURN          reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    CASE            reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)
    DEFAULT         reduce using rule 104 (conditional_structure -> IF conditions conditional_body ELSE conditional_body .)


state 251

    (106) conditional_body -> LBRACE statement RBRACE .

    ELSE            reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    SEMICOLON       reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    PRINT           reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    PRINTF          reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    INPUT           reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    LPAREN          reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    FUNCTION        reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    VAR             reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    VARIABLE        reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    CONST           reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    TYPE            reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    IF              reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    SWITCH          reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    CHARSTRING      reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    INT             reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    FLOAT           reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    FOR             reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    $end            reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    RBRACE          reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    RETURN          reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    CASE            reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)
    DEFAULT         reduce using rule 106 (conditional_body -> LBRACE statement RBRACE .)


state 252

    (107) conditional_body -> LBRACE statement return . RBRACE

    RBRACE          shift and go to state 285


state 253

    (108) conditional_body -> LBRACE return RBRACE .

    ELSE            reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    SEMICOLON       reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    PRINT           reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    PRINTF          reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    INPUT           reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    LPAREN          reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    FUNCTION        reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    VAR             reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    VARIABLE        reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    CONST           reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    TYPE            reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    IF              reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    SWITCH          reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    CHARSTRING      reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    INT             reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    FLOAT           reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    FOR             reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    $end            reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    RBRACE          reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    RETURN          reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    CASE            reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)
    DEFAULT         reduce using rule 108 (conditional_body -> LBRACE return RBRACE .)


state 254

    (109) conditional_body -> LBRACE BREAK RBRACE .

    ELSE            reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    SEMICOLON       reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    PRINT           reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    PRINTF          reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    INPUT           reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    LPAREN          reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    FUNCTION        reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    VAR             reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    VARIABLE        reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    CONST           reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    TYPE            reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    IF              reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    SWITCH          reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    CHARSTRING      reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    INT             reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    FLOAT           reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    FOR             reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    $end            reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    RBRACE          reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    RETURN          reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    CASE            reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)
    DEFAULT         reduce using rule 109 (conditional_body -> LBRACE BREAK RBRACE .)


state 255

    (110) conditional_body -> LBRACE CONTINUE RBRACE .

    ELSE            reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    SEMICOLON       reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    PRINT           reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    PRINTF          reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    INPUT           reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    LPAREN          reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    FUNCTION        reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    VAR             reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    VARIABLE        reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    CONST           reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    TYPE            reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    IF              reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    SWITCH          reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    CHARSTRING      reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    INT             reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    FLOAT           reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    FOR             reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    $end            reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    RBRACE          reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    RETURN          reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    CASE            reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)
    DEFAULT         reduce using rule 110 (conditional_body -> LBRACE CONTINUE RBRACE .)


state 256

    (74) return -> RETURN value .
    (75) return -> RETURN value . LBRACKET value RBRACKET
    (76) return -> RETURN value . PERIOD value

    RBRACE          reduce using rule 74 (return -> RETURN value .)
    LBRACKET        shift and go to state 286
    PERIOD          shift and go to state 287


state 257

    (129) switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .

    SEMICOLON       reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    PRINT           reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    PRINTF          reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    INPUT           reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    LPAREN          reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    FUNCTION        reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    VAR             reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    VARIABLE        reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    CONST           reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    TYPE            reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    IF              reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    SWITCH          reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    CHARSTRING      reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    INT             reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    FLOAT           reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    FOR             reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    $end            reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    RBRACE          reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    RETURN          reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    CASE            reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)
    DEFAULT         reduce using rule 129 (switch_structure -> SWITCH switch_expression LBRACE case_blocks RBRACE .)


state 258

    (133) case_blocks -> case_block case_blocks .

    RBRACE          reduce using rule 133 (case_blocks -> case_block case_blocks .)


state 259

    (134) case_block -> CASE values . COLON statement

    COLON           shift and go to state 288


state 260

    (135) case_block -> DEFAULT COLON . statement
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 289
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 261

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON . condition SEMICOLON value double_operator LBRACE statement RBRACE
    (113) condition -> . value relational_operator value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 91
    condition                      shift and go to state 290
    not_variable_value             shift and go to state 36

state 262

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN . RANGE VARIABLE LBRACE statement RBRACE

    RANGE           shift and go to state 291


state 263

    (8) statement -> package import main LBRACE blocks RBRACE .

    $end            reduce using rule 8 (statement -> package import main LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 8 (statement -> package import main LBRACE blocks RBRACE .)
    RETURN          reduce using rule 8 (statement -> package import main LBRACE blocks RBRACE .)
    CASE            reduce using rule 8 (statement -> package import main LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 8 (statement -> package import main LBRACE blocks RBRACE .)


state 264

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET . type LBRACE map_values RBRACE
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 292

state 265

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE . values RBRACE
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 293
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 266

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 294

state 267

    (154) map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .

    SEMICOLON       reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    PRINT           reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    PRINTF          reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    INPUT           reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    LPAREN          reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    FUNCTION        reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    VAR             reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    VARIABLE        reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    CONST           reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    TYPE            reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    IF              reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    SWITCH          reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    CHARSTRING      reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    INT             reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    FLOAT           reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    FOR             reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    $end            reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    RBRACE          reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    RETURN          reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    CASE            reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)
    DEFAULT         reduce using rule 154 (map_assign -> VARIABLE LBRACKET value RBRACKET ASSIGN value .)


state 268

    (148) array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .

    SEMICOLON       reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    PRINT           reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    PRINTF          reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    INPUT           reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    LPAREN          reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    FUNCTION        reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    VAR             reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    VARIABLE        reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    CONST           reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    TYPE            reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    IF              reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    SWITCH          reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    CHARSTRING      reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    INT             reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    FLOAT           reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    FOR             reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    $end            reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    RBRACE          reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    RETURN          reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    CASE            reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)
    DEFAULT         reduce using rule 148 (array_assign -> VARIABLE LBRACKET INT RBRACKET ASSIGN value .)


state 269

    (159) append_statement -> APPEND LPAREN VARIABLE COMMA . values RPAREN
    (160) append_statement -> APPEND LPAREN VARIABLE COMMA . LBRACKET RBRACKET type LBRACE values RBRACE RPAREN
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    LBRACKET        shift and go to state 296
    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 295
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 270

    (57) parameters -> VARIABLE type COMMA . parameters
    (56) parameters -> . VARIABLE type
    (57) parameters -> . VARIABLE type COMMA parameters

    VARIABLE        shift and go to state 182

    parameters                     shift and go to state 297

state 271

    (66) function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks . RBRACE

    RBRACE          shift and go to state 298


state 272

    (67) function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .

    SEMICOLON       reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    PRINTF          reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    INPUT           reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    VAR             reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    CONST           reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    TYPE            reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    IF              reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    CHARSTRING      reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    INT             reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    $end            reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 67 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE .)


state 273

    (68) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE . blocks return RBRACE
    (69) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE . return RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    RETURN          shift and go to state 206
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 299
    return                         shift and go to state 300
    block                          shift and go to state 6
    value                          shift and go to state 24
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 274

    (70) function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE . blocks RBRACE
    (71) function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE . RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    RBRACE          shift and go to state 302
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 301
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 275

    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type . LBRACE blocks return RBRACE
    (73) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type . LBRACE return RBRACE

    LBRACE          shift and go to state 303


state 276

    (78) print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .

    SEMICOLON       reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    PRINT           reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    PRINTF          reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    INPUT           reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    LPAREN          reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    FUNCTION        reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    VAR             reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    VARIABLE        reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    CONST           reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    TYPE            reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    IF              reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    SWITCH          reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    CHARSTRING      reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    INT             reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    FLOAT           reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    FOR             reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    $end            reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    RBRACE          reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    RETURN          reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    CASE            reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)
    DEFAULT         reduce using rule 78 (print_statement -> PRINTF LPAREN FORMATSTRING COMMA values RPAREN .)


state 277

    (87) operation -> LPAREN value operator value . RPAREN
    (84) operation -> value operator value .
    (84) operation -> value . operator value
    (85) operation -> value . operator LPAREN value RPAREN
    (88) operation -> value . operator operation
    (91) operation -> value . operator LPAREN operation RPAREN
    (92) operation -> value . double_operator
    (93) operator -> . PLUS
    (94) operator -> . MINUS
    (95) operator -> . TIMES
    (96) operator -> . DIVIDE
    (97) operator -> . ASSIGN
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 222
    PLUS            shift and go to state 80
    MINUS           shift and go to state 81
    TIMES           shift and go to state 82
    DIVIDE          shift and go to state 83
    ASSIGN          shift and go to state 84
    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

  ! RPAREN          [ reduce using rule 84 (operation -> value operator value .) ]

    operator                       shift and go to state 78
    double_operator                shift and go to state 79

state 278

    (89) operation -> LPAREN value operator operation . RPAREN
    (88) operation -> value operator operation .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 223

  ! RPAREN          [ reduce using rule 88 (operation -> value operator operation .) ]


state 279

    (145) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .
    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type . ASSIGN LBRACKET values RBRACKET

    SEMICOLON       reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    PRINT           reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    PRINTF          reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    INPUT           reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    LPAREN          reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    FUNCTION        reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    VAR             reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    VARIABLE        reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    CONST           reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    TYPE            reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    IF              reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    SWITCH          reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    CHARSTRING      reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    INT             reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    FLOAT           reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    FOR             reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    $end            reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    RBRACE          reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    RETURN          reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    CASE            reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    DEFAULT         reduce using rule 145 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type .)
    ASSIGN          shift and go to state 304


state 280

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET . type LBRACE values RBRACE
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 305

state 281

    (144) struct_field -> VARIABLE type .

    VARIABLE        reduce using rule 144 (struct_field -> VARIABLE type .)
    RBRACE          reduce using rule 144 (struct_field -> VARIABLE type .)


state 282

    (141) struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    SEMICOLON       reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    PRINT           reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    PRINTF          reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    INPUT           reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    LPAREN          reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FUNCTION        reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CONST           reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CHARSTRING      reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    INT             reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FLOAT           reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 141 (struct_structure -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 283

    (143) struct_fields -> struct_field struct_fields .

    RBRACE          reduce using rule 143 (struct_fields -> struct_field struct_fields .)


state 284

    (105) conditional_structure -> IF conditions conditional_body ELSE IF conditions . conditional_body ELSE conditional_body
    (106) conditional_body -> . LBRACE statement RBRACE
    (107) conditional_body -> . LBRACE statement return RBRACE
    (108) conditional_body -> . LBRACE return RBRACE
    (109) conditional_body -> . LBRACE BREAK RBRACE
    (110) conditional_body -> . LBRACE CONTINUE RBRACE

    LBRACE          shift and go to state 148

    conditional_body               shift and go to state 306

state 285

    (107) conditional_body -> LBRACE statement return RBRACE .

    ELSE            reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    SEMICOLON       reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    PRINT           reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    PRINTF          reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    INPUT           reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    LPAREN          reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    FUNCTION        reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    VAR             reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    VARIABLE        reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    CONST           reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    TYPE            reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    IF              reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    SWITCH          reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    CHARSTRING      reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    INT             reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    FLOAT           reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    FOR             reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    $end            reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    RBRACE          reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    RETURN          reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    CASE            reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)
    DEFAULT         reduce using rule 107 (conditional_body -> LBRACE statement return RBRACE .)


state 286

    (75) return -> RETURN value LBRACKET . value RBRACKET
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 307
    not_variable_value             shift and go to state 36

state 287

    (76) return -> RETURN value PERIOD . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 308
    not_variable_value             shift and go to state 36

state 288

    (134) case_block -> CASE values COLON . statement
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 309
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 289

    (135) case_block -> DEFAULT COLON statement .

    CASE            reduce using rule 135 (case_block -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 135 (case_block -> DEFAULT COLON statement .)
    RBRACE          reduce using rule 135 (case_block -> DEFAULT COLON statement .)


state 290

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition . SEMICOLON value double_operator LBRACE statement RBRACE

    SEMICOLON       shift and go to state 310


state 291

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE . VARIABLE LBRACE statement RBRACE

    VARIABLE        shift and go to state 311


state 292

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type . LBRACE map_values RBRACE

    LBRACE          shift and go to state 312


state 293

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values . RBRACE

    RBRACE          shift and go to state 313


state 294

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 314


state 295

    (159) append_statement -> APPEND LPAREN VARIABLE COMMA values . RPAREN

    RPAREN          shift and go to state 315


state 296

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET . RBRACKET type LBRACE values RBRACE RPAREN

    RBRACKET        shift and go to state 316


state 297

    (57) parameters -> VARIABLE type COMMA parameters .

    RPAREN          reduce using rule 57 (parameters -> VARIABLE type COMMA parameters .)


state 298

    (66) function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .

    SEMICOLON       reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    PRINT           reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    PRINTF          reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    INPUT           reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    LPAREN          reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    FUNCTION        reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    VAR             reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    VARIABLE        reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    CONST           reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    TYPE            reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    IF              reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    SWITCH          reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    CHARSTRING      reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    INT             reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    FLOAT           reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    FOR             reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    $end            reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    RETURN          reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    CASE            reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 66 (function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE .)


state 299

    (68) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks . return RBRACE
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value

    RETURN          shift and go to state 206

    return                         shift and go to state 317

state 300

    (69) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return . RBRACE

    RBRACE          shift and go to state 318


state 301

    (70) function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks . RBRACE

    RBRACE          shift and go to state 319


state 302

    (71) function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .

    SEMICOLON       reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    PRINT           reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    PRINTF          reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    INPUT           reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    LPAREN          reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    FUNCTION        reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    VAR             reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    VARIABLE        reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CONST           reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    TYPE            reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    IF              reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    SWITCH          reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CHARSTRING      reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    INT             reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    FLOAT           reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    FOR             reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    $end            reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    RBRACE          reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    CASE            reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)
    DEFAULT         reduce using rule 71 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE .)


state 303

    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE . blocks return RBRACE
    (73) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE . return RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

    RETURN          shift and go to state 206
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    FUNCTION        shift and go to state 54
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

    blocks                         shift and go to state 320
    return                         shift and go to state 321
    block                          shift and go to state 6
    value                          shift and go to state 24
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 304

    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN . LBRACKET values RBRACKET

    LBRACKET        shift and go to state 322


state 305

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type . LBRACE values RBRACE

    LBRACE          shift and go to state 323


state 306

    (105) conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body . ELSE conditional_body

    ELSE            shift and go to state 324


state 307

    (75) return -> RETURN value LBRACKET value . RBRACKET

    RBRACKET        shift and go to state 325


state 308

    (76) return -> RETURN value PERIOD value .

    RBRACE          reduce using rule 76 (return -> RETURN value PERIOD value .)


state 309

    (134) case_block -> CASE values COLON statement .

    CASE            reduce using rule 134 (case_block -> CASE values COLON statement .)
    DEFAULT         reduce using rule 134 (case_block -> CASE values COLON statement .)
    RBRACE          reduce using rule 134 (case_block -> CASE values COLON statement .)


state 310

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON . value double_operator LBRACE statement RBRACE
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 326
    not_variable_value             shift and go to state 36

state 311

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE . LBRACE statement RBRACE

    LBRACE          shift and go to state 327


state 312

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE . map_values RBRACE
    (151) map_values -> . map_value
    (152) map_values -> . map_value COMMA map_values
    (153) map_value -> . value COLON value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    map_values                     shift and go to state 328
    map_value                      shift and go to state 329
    value                          shift and go to state 330
    not_variable_value             shift and go to state 36

state 313

    (155) slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .

    SEMICOLON       reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    PRINT           reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    PRINTF          reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    INPUT           reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    LPAREN          reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    FUNCTION        reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    VAR             reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    VARIABLE        reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    CONST           reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    TYPE            reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    IF              reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    SWITCH          reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    CHARSTRING      reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    INT             reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    FLOAT           reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    FOR             reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    $end            reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    RBRACE          reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    RETURN          reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    CASE            reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)
    DEFAULT         reduce using rule 155 (slice_structure -> VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE .)


state 314

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 331

state 315

    (159) append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .

    SEMICOLON       reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    PRINT           reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    PRINTF          reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    INPUT           reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    LPAREN          reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    FUNCTION        reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    VAR             reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    VARIABLE        reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    CONST           reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    TYPE            reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    IF              reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    SWITCH          reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    CHARSTRING      reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    INT             reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    FLOAT           reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    FOR             reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    $end            reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    RBRACE          reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    RETURN          reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    CASE            reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)
    DEFAULT         reduce using rule 159 (append_statement -> APPEND LPAREN VARIABLE COMMA values RPAREN .)


state 316

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET . type LBRACE values RBRACE RPAREN
    (58) type -> . INT
    (59) type -> . INT32
    (60) type -> . INT64
    (61) type -> . STRING
    (62) type -> . FLOAT
    (63) type -> . FLOAT32
    (64) type -> . FLOAT64
    (65) type -> . BOOL

    INT             shift and go to state 134
    INT32           shift and go to state 135
    INT64           shift and go to state 136
    STRING          shift and go to state 137
    FLOAT           shift and go to state 138
    FLOAT32         shift and go to state 139
    FLOAT64         shift and go to state 140
    BOOL            shift and go to state 141

    type                           shift and go to state 332

state 317

    (68) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return . RBRACE

    RBRACE          shift and go to state 333


state 318

    (69) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .

    SEMICOLON       reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    PRINT           reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    PRINTF          reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    INPUT           reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    LPAREN          reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    FUNCTION        reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    VAR             reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    VARIABLE        reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    CONST           reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    TYPE            reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    IF              reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    SWITCH          reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    CHARSTRING      reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    INT             reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    FLOAT           reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    FOR             reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    $end            reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    RBRACE          reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    RETURN          reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    CASE            reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)
    DEFAULT         reduce using rule 69 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE .)


state 319

    (70) function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .

    SEMICOLON       reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    PRINT           reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    PRINTF          reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    INPUT           reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    LPAREN          reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    FUNCTION        reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    VAR             reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    VARIABLE        reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    CONST           reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    TYPE            reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    IF              reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    SWITCH          reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    CHARSTRING      reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    INT             reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    FLOAT           reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    FOR             reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    $end            reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    RBRACE          reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    RETURN          reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    CASE            reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)
    DEFAULT         reduce using rule 70 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE .)


state 320

    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks . return RBRACE
    (74) return -> . RETURN value
    (75) return -> . RETURN value LBRACKET value RBRACKET
    (76) return -> . RETURN value PERIOD value

    RETURN          shift and go to state 206

    return                         shift and go to state 334

state 321

    (73) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return . RBRACE

    RBRACE          shift and go to state 335


state 322

    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET . values RBRACKET
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 336
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 323

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE . values RBRACE
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 337
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 324

    (105) conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE . conditional_body
    (106) conditional_body -> . LBRACE statement RBRACE
    (107) conditional_body -> . LBRACE statement return RBRACE
    (108) conditional_body -> . LBRACE return RBRACE
    (109) conditional_body -> . LBRACE BREAK RBRACE
    (110) conditional_body -> . LBRACE CONTINUE RBRACE

    LBRACE          shift and go to state 148

    conditional_body               shift and go to state 338

state 325

    (75) return -> RETURN value LBRACKET value RBRACKET .

    RBRACE          reduce using rule 75 (return -> RETURN value LBRACKET value RBRACKET .)


state 326

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value . double_operator LBRACE statement RBRACE
    (98) double_operator -> . INCREMENT
    (99) double_operator -> . DECREMENT

    INCREMENT       shift and go to state 71
    DECREMENT       shift and go to state 72

    double_operator                shift and go to state 339

state 327

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE . statement RBRACE
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    statement                      shift and go to state 340
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    value                          shift and go to state 24
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 328

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values . RBRACE

    RBRACE          shift and go to state 341


state 329

    (151) map_values -> map_value .
    (152) map_values -> map_value . COMMA map_values

    RBRACE          reduce using rule 151 (map_values -> map_value .)
    COMMA           shift and go to state 342


state 330

    (153) map_value -> value . COLON value

    COLON           shift and go to state 343


state 331

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 344


state 332

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type . LBRACE values RBRACE RPAREN

    LBRACE          shift and go to state 345


state 333

    (68) function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .

    SEMICOLON       reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    PRINT           reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    PRINTF          reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    INPUT           reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    LPAREN          reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    FUNCTION        reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    VAR             reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    VARIABLE        reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    CONST           reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    TYPE            reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    IF              reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    SWITCH          reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    CHARSTRING      reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    INT             reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    FLOAT           reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    FOR             reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    $end            reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    RBRACE          reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    RETURN          reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    CASE            reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)
    DEFAULT         reduce using rule 68 (function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE .)


state 334

    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return . RBRACE

    RBRACE          shift and go to state 346


state 335

    (73) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .

    SEMICOLON       reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    PRINT           reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    PRINTF          reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    INPUT           reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    LPAREN          reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    FUNCTION        reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    VAR             reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    VARIABLE        reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    CONST           reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    TYPE            reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    IF              reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    SWITCH          reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    CHARSTRING      reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    INT             reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    FLOAT           reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    FOR             reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    $end            reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    RBRACE          reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    RETURN          reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    CASE            reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)
    DEFAULT         reduce using rule 73 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE .)


state 336

    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 347


state 337

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values . RBRACE

    RBRACE          shift and go to state 348


state 338

    (105) conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .

    SEMICOLON       reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    PRINT           reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    PRINTF          reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    INPUT           reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    LPAREN          reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    FUNCTION        reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    VAR             reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    VARIABLE        reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    CONST           reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    TYPE            reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    IF              reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    SWITCH          reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    CHARSTRING      reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    INT             reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    FLOAT           reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    FOR             reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    $end            reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    RBRACE          reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    RETURN          reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    CASE            reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)
    DEFAULT         reduce using rule 105 (conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body .)


state 339

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator . LBRACE statement RBRACE

    LBRACE          shift and go to state 349


state 340

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement . RBRACE

    RBRACE          shift and go to state 350


state 341

    (149) map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .

    SEMICOLON       reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    PRINT           reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    PRINTF          reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    INPUT           reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    LPAREN          reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    FUNCTION        reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    VAR             reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    VARIABLE        reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    CONST           reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    TYPE            reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    IF              reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    SWITCH          reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    CHARSTRING      reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    INT             reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    FLOAT           reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    FOR             reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    $end            reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    RBRACE          reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    RETURN          reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    CASE            reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)
    DEFAULT         reduce using rule 149 (map_structure -> VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE .)


state 342

    (152) map_values -> map_value COMMA . map_values
    (151) map_values -> . map_value
    (152) map_values -> . map_value COMMA map_values
    (153) map_value -> . value COLON value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    map_value                      shift and go to state 329
    map_values                     shift and go to state 351
    value                          shift and go to state 330
    not_variable_value             shift and go to state 36

state 343

    (153) map_value -> value COLON . value
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    value                          shift and go to state 352
    not_variable_value             shift and go to state 36

state 344

    (150) map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

    SEMICOLON       reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PRINT           reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PRINTF          reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    INPUT           reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LPAREN          reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNCTION        reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONST           reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CHARSTRING      reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    INT             reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FLOAT           reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 150 (map_structure -> VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)


state 345

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE . values RBRACE RPAREN
    (37) values -> . value
    (38) values -> . value COMMA values
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT

    VARIABLE        shift and go to state 58
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44

    values                         shift and go to state 353
    value                          shift and go to state 235
    not_variable_value             shift and go to state 36

state 346

    (72) function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .

    SEMICOLON       reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    PRINT           reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    PRINTF          reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    INPUT           reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    LPAREN          reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    FUNCTION        reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    VAR             reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    VARIABLE        reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    CONST           reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    TYPE            reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    IF              reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    SWITCH          reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    CHARSTRING      reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    INT             reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    FLOAT           reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    FOR             reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    $end            reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    RBRACE          reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    RETURN          reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    CASE            reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)
    DEFAULT         reduce using rule 72 (function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE .)


state 347

    (147) array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .

    SEMICOLON       reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    PRINT           reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    PRINTF          reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    INPUT           reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    LPAREN          reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    FUNCTION        reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    VAR             reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    VARIABLE        reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    CONST           reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    TYPE            reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    IF              reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    SWITCH          reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    CHARSTRING      reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    INT             reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    FLOAT           reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    FOR             reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    $end            reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    RBRACE          reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    RETURN          reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    CASE            reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)
    DEFAULT         reduce using rule 147 (array_structure -> VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET .)


state 348

    (146) array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .

    SEMICOLON       reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    PRINT           reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    PRINTF          reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    INPUT           reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    LPAREN          reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    FUNCTION        reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    VAR             reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    VARIABLE        reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    CONST           reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    TYPE            reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    IF              reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    SWITCH          reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    CHARSTRING      reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    INT             reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    FLOAT           reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    FOR             reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    $end            reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    RBRACE          reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    RETURN          reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    CASE            reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)
    DEFAULT         reduce using rule 146 (array_structure -> VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE .)


state 349

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE . statement RBRACE
    (1) statement -> . blocks
    (2) statement -> . import blocks
    (3) statement -> . package blocks
    (4) statement -> . package import blocks
    (5) statement -> . main LBRACE blocks RBRACE
    (6) statement -> . package main LBRACE blocks RBRACE
    (7) statement -> . import main LBRACE blocks RBRACE
    (8) statement -> . package import main LBRACE blocks RBRACE
    (17) blocks -> . block
    (18) blocks -> . block blocks
    (19) blocks -> . block SEMICOLON blocks
    (9) import -> .
    (10) import -> . IMPORT CHARSTRING
    (11) import -> . IMPORT LPAREN values_for_import RPAREN
    (14) package -> . PACKAGE VARIABLE
    (15) package -> . PACKAGE MAIN
    (16) main -> . FUNCTION MAIN LPAREN RPAREN
    (20) block -> . print_statement
    (21) block -> . input_statement
    (22) block -> . operation
    (23) block -> . data_structure
    (24) block -> . control_structure
    (25) block -> . function
    (26) block -> . variable_declaration
    (27) block -> . variable_assignation
    (77) print_statement -> . PRINT LPAREN values RPAREN
    (78) print_statement -> . PRINTF LPAREN FORMATSTRING COMMA values RPAREN
    (79) print_statement -> . PRINT LPAREN operation RPAREN
    (80) print_statement -> . PRINT LPAREN RPAREN
    (81) input_statement -> . INPUT LPAREN values RPAREN
    (82) input_statement -> . INPUT LPAREN operation RPAREN
    (83) input_statement -> . INPUT LPAREN RPAREN
    (84) operation -> . value operator value
    (85) operation -> . value operator LPAREN value RPAREN
    (86) operation -> . LPAREN value RPAREN operator value
    (87) operation -> . LPAREN value operator value RPAREN
    (88) operation -> . value operator operation
    (89) operation -> . LPAREN value operator operation RPAREN
    (90) operation -> . LPAREN value RPAREN operator operation
    (91) operation -> . value operator LPAREN operation RPAREN
    (92) operation -> . value double_operator
    (137) data_structure -> . array_structure
    (138) data_structure -> . map_structure
    (139) data_structure -> . slice_structure
    (140) data_structure -> . struct_structure
    (100) control_structure -> . conditional_structure
    (101) control_structure -> . for_estructure
    (102) control_structure -> . switch_structure
    (66) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE
    (67) function -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE RBRACE
    (68) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks return RBRACE
    (69) function -> . FUNCTION VARIABLE LPAREN RPAREN type LBRACE return RBRACE
    (70) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE
    (71) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE RBRACE
    (72) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks return RBRACE
    (73) function -> . FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE return RBRACE
    (39) variable_declaration -> . VAR variables type
    (40) variable_declaration -> . VAR variables type ASSIGN value
    (41) variable_declaration -> . VAR variables type ASSIGN operation
    (42) variable_declaration -> . VARIABLE SHORTASSIGN value
    (43) variable_declaration -> . VARIABLE SHORTASSIGN operation
    (44) variable_declaration -> . CONST VARIABLE ASSIGN value
    (45) variable_assignation -> . VARIABLE assignation value
    (46) variable_assignation -> . VARIABLE assignation operation
    (47) variable_assignation -> . VARIABLE double_operator
    (48) variable_assignation -> . map_assign
    (49) variable_assignation -> . array_assign
    (30) value -> . VARIABLE
    (31) value -> . VARIABLE LBRACKET RBRACKET
    (32) value -> . VARIABLE LBRACKET value RBRACKET
    (33) value -> . not_variable_value
    (145) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type
    (146) array_structure -> . VAR VARIABLE ASSIGN LBRACKET INT RBRACKET type LBRACE values RBRACE
    (147) array_structure -> . VAR VARIABLE LBRACKET INT RBRACKET type ASSIGN LBRACKET values RBRACKET
    (149) map_structure -> . VARIABLE SHORTASSIGN MAP LBRACKET type RBRACKET type LBRACE map_values RBRACE
    (150) map_structure -> . VARIABLE SHORTASSIGN MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (155) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type LBRACE values RBRACE
    (156) slice_structure -> . VAR VARIABLE LBRACKET RBRACKET type
    (157) slice_structure -> . VARIABLE SHORTASSIGN LBRACKET RBRACKET type
    (158) slice_structure -> . VARIABLE ASSIGN append_statement
    (141) struct_structure -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (103) conditional_structure -> . IF conditions conditional_body
    (104) conditional_structure -> . IF conditions conditional_body ELSE conditional_body
    (105) conditional_structure -> . IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body
    (123) for_estructure -> . for_initialization
    (124) for_estructure -> . for_infinite_bucle
    (125) for_estructure -> . for_iterator
    (129) switch_structure -> . SWITCH switch_expression LBRACE case_blocks RBRACE
    (154) map_assign -> . VARIABLE LBRACKET value RBRACKET ASSIGN value
    (148) array_assign -> . VARIABLE LBRACKET INT RBRACKET ASSIGN value
    (34) not_variable_value -> . CHARSTRING
    (35) not_variable_value -> . INT
    (36) not_variable_value -> . FLOAT
    (126) for_initialization -> . FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE
    (127) for_infinite_bucle -> . FOR LBRACE statement RBRACE
    (128) for_iterator -> . FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE

  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PRINTF resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CHARSTRING resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IMPORT          shift and go to state 7
    PACKAGE         shift and go to state 10
    FUNCTION        shift and go to state 12
    PRINT           shift and go to state 21
    PRINTF          shift and go to state 22
    INPUT           shift and go to state 23
    LPAREN          shift and go to state 9
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 11
    CONST           shift and go to state 33
    TYPE            shift and go to state 38
    IF              shift and go to state 39
    SWITCH          shift and go to state 43
    CHARSTRING      shift and go to state 8
    INT             shift and go to state 37
    FLOAT           shift and go to state 44
    FOR             shift and go to state 45

  ! FUNCTION        [ reduce using rule 9 (import -> .) ]
  ! PRINT           [ reduce using rule 9 (import -> .) ]
  ! PRINTF          [ reduce using rule 9 (import -> .) ]
  ! INPUT           [ reduce using rule 9 (import -> .) ]
  ! LPAREN          [ reduce using rule 9 (import -> .) ]
  ! VAR             [ reduce using rule 9 (import -> .) ]
  ! VARIABLE        [ reduce using rule 9 (import -> .) ]
  ! CONST           [ reduce using rule 9 (import -> .) ]
  ! TYPE            [ reduce using rule 9 (import -> .) ]
  ! IF              [ reduce using rule 9 (import -> .) ]
  ! SWITCH          [ reduce using rule 9 (import -> .) ]
  ! CHARSTRING      [ reduce using rule 9 (import -> .) ]
  ! INT             [ reduce using rule 9 (import -> .) ]
  ! FLOAT           [ reduce using rule 9 (import -> .) ]
  ! FOR             [ reduce using rule 9 (import -> .) ]

    value                          shift and go to state 24
    statement                      shift and go to state 354
    blocks                         shift and go to state 2
    import                         shift and go to state 3
    package                        shift and go to state 4
    main                           shift and go to state 5
    block                          shift and go to state 6
    print_statement                shift and go to state 13
    input_statement                shift and go to state 14
    operation                      shift and go to state 15
    data_structure                 shift and go to state 16
    control_structure              shift and go to state 17
    function                       shift and go to state 18
    variable_declaration           shift and go to state 19
    variable_assignation           shift and go to state 20
    array_structure                shift and go to state 25
    map_structure                  shift and go to state 26
    slice_structure                shift and go to state 27
    struct_structure               shift and go to state 28
    conditional_structure          shift and go to state 29
    for_estructure                 shift and go to state 30
    switch_structure               shift and go to state 31
    map_assign                     shift and go to state 34
    array_assign                   shift and go to state 35
    not_variable_value             shift and go to state 36
    for_initialization             shift and go to state 40
    for_infinite_bucle             shift and go to state 41
    for_iterator                   shift and go to state 42

state 350

    (128) for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .

    SEMICOLON       reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    PRINT           reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    PRINTF          reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    INPUT           reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    LPAREN          reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    FUNCTION        reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    VAR             reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    VARIABLE        reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    CONST           reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    TYPE            reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    IF              reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    SWITCH          reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    CHARSTRING      reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    INT             reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    FLOAT           reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    FOR             reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    $end            reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    RBRACE          reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    RETURN          reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    CASE            reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)
    DEFAULT         reduce using rule 128 (for_iterator -> FOR VARIABLE COMMA VARIABLE SHORTASSIGN RANGE VARIABLE LBRACE statement RBRACE .)


state 351

    (152) map_values -> map_value COMMA map_values .

    RBRACE          reduce using rule 152 (map_values -> map_value COMMA map_values .)


state 352

    (153) map_value -> value COLON value .

    COMMA           reduce using rule 153 (map_value -> value COLON value .)
    RBRACE          reduce using rule 153 (map_value -> value COLON value .)


state 353

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values . RBRACE RPAREN

    RBRACE          shift and go to state 355


state 354

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement . RBRACE

    RBRACE          shift and go to state 356


state 355

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE . RPAREN

    RPAREN          shift and go to state 357


state 356

    (126) for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .

    SEMICOLON       reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    PRINT           reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    PRINTF          reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    INPUT           reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    LPAREN          reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    FUNCTION        reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    VAR             reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    VARIABLE        reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    CONST           reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    TYPE            reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    IF              reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    SWITCH          reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    CHARSTRING      reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    INT             reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    FLOAT           reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    FOR             reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    $end            reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    RBRACE          reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    RETURN          reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    CASE            reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)
    DEFAULT         reduce using rule 126 (for_initialization -> FOR VARIABLE SHORTASSIGN value SEMICOLON condition SEMICOLON value double_operator LBRACE statement RBRACE .)


state 357

    (160) append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .

    SEMICOLON       reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    PRINT           reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    PRINTF          reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    INPUT           reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    LPAREN          reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    FUNCTION        reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    VAR             reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    VARIABLE        reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    CONST           reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    TYPE            reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    IF              reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    SWITCH          reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    CHARSTRING      reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    INT             reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    FLOAT           reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    FOR             reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    $end            reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    RBRACE          reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    RETURN          reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    CASE            reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)
    DEFAULT         reduce using rule 160 (append_statement -> APPEND LPAREN VARIABLE COMMA LBRACKET RBRACKET type LBRACE values RBRACE RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNCTION in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 0 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for VAR in state 0 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 0 resolved as shift
WARNING: shift/reduce conflict for CONST in state 0 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 4 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 4 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 4 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 4 resolved as shift
WARNING: shift/reduce conflict for VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 4 resolved as shift
WARNING: shift/reduce conflict for CONST in state 4 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 4 resolved as shift
WARNING: shift/reduce conflict for IF in state 4 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 4 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 4 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 4 resolved as shift
WARNING: shift/reduce conflict for FOR in state 4 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 11 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 11 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 11 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 58 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 96 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 96 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 96 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 96 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for VAR in state 96 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 96 resolved as shift
WARNING: shift/reduce conflict for CONST in state 96 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 96 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 96 resolved as shift
WARNING: shift/reduce conflict for INT in state 96 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 96 resolved as shift
WARNING: shift/reduce conflict for FOR in state 96 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 148 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 148 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 148 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 148 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 148 resolved as shift
WARNING: shift/reduce conflict for VAR in state 148 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 148 resolved as shift
WARNING: shift/reduce conflict for CONST in state 148 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 148 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 148 resolved as shift
WARNING: shift/reduce conflict for INT in state 148 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 178 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 260 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 260 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 260 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 260 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for VAR in state 260 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 260 resolved as shift
WARNING: shift/reduce conflict for CONST in state 260 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 260 resolved as shift
WARNING: shift/reduce conflict for IF in state 260 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 260 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 260 resolved as shift
WARNING: shift/reduce conflict for INT in state 260 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 260 resolved as shift
WARNING: shift/reduce conflict for FOR in state 260 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 277 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 278 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 288 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 288 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 288 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 288 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 288 resolved as shift
WARNING: shift/reduce conflict for VAR in state 288 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 288 resolved as shift
WARNING: shift/reduce conflict for CONST in state 288 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 288 resolved as shift
WARNING: shift/reduce conflict for IF in state 288 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 288 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 288 resolved as shift
WARNING: shift/reduce conflict for INT in state 288 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 288 resolved as shift
WARNING: shift/reduce conflict for FOR in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 327 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 327 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 327 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 327 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 327 resolved as shift
WARNING: shift/reduce conflict for VAR in state 327 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 327 resolved as shift
WARNING: shift/reduce conflict for CONST in state 327 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 327 resolved as shift
WARNING: shift/reduce conflict for IF in state 327 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 327 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 327 resolved as shift
WARNING: shift/reduce conflict for INT in state 327 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 327 resolved as shift
WARNING: shift/reduce conflict for FOR in state 327 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 349 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 349 resolved as shift
WARNING: shift/reduce conflict for PRINTF in state 349 resolved as shift
WARNING: shift/reduce conflict for INPUT in state 349 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 349 resolved as shift
WARNING: shift/reduce conflict for VAR in state 349 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 349 resolved as shift
WARNING: shift/reduce conflict for CONST in state 349 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 349 resolved as shift
WARNING: shift/reduce conflict for IF in state 349 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 349 resolved as shift
WARNING: shift/reduce conflict for CHARSTRING in state 349 resolved as shift
WARNING: shift/reduce conflict for INT in state 349 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 349 resolved as shift
WARNING: shift/reduce conflict for FOR in state 349 resolved as shift
