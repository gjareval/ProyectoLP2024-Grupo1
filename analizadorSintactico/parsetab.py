
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND APPEND ASSIGN BOOL BREAK CASE CHARSTRING COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIFFERENT DIVIDE DIVIDEASSIGN ELSE EQUALS FALSE FLOAT FLOAT FLOAT32 FLOAT64 FOR FORMATSTRING FUNCTION GREATER GREATEREQUALS IDENTIFIER IF IMPORT INCREMENT INPUT INT INT INT32 INT64 LBRACE LBRACKET LESS LESSEQUALS LPAREN MAIN MAKE MAP MINUS MINUSASSIGN MOD MODASSIGN NOT OR PACKAGE PLUS PLUSASSIGN PRINT RANGE RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING STRUCT SWITCH TEXT TIMES TIMESASSIGN TRUE TYPE VAR VARIABLEstatement : structure\n                 | blocks\n                 | function\n                 | parameters\n                 blocks : block\n              block : print_statement\n             | input_statement\n             | conditional_structure\n             | operation\n             | list_structure\n             structure : TYPE VARIABLE STRUCT LBRACE statement RBRACEfunction : FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks RETURN VARIABLE RBRACE\n                | FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE\n                | FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks RETURN VARIABLE RBRACE\n                | FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE\n                operation : value operator value\n                 | value operator operationoperation : value double_operatoroperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | ASSIGNdouble_operator : INCREMENT\n                       | DECREMENTprint_statement : PRINT LPAREN values RPAREN\n                       | PRINT LPAREN operation RPAREN\n                       | PRINT LPAREN RPARENinput_statement : INPUT LPAREN values RPAREN\n                       | INPUT LPAREN operation RPAREN\n                       | INPUT LPAREN RPARENparameters : parameter\n                  | parameter parameters\n                  | parameter COMMA parameters\n                  parameter : VARIABLE typetype : INT\n            | INT32\n            | INT64\n            | STRING\n            | FLOAT\n            | FLOAT32\n            | FLOAT64\n            | BOOL\n            conditional_structure : IF conditions conditional_body\n                             | IF conditions conditional_body ELSE conditional_body\n                             | IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_bodyconditional_body : LBRACE statement RBRACEconditions : condition\n                  | condition logical_operator conditions\n                  condition : value relational_operator valuelogical_operator : AND\n                        | OR\n                        | NOTrelational_operator : GREATER\n                           | LESS\n                           | GREATEREQUALS\n                           | LESSEQUALS\n                           | EQUALS\n                           | DIFFERENT\n    list_structure : empty_list\n                      | list_with_data\n                      | defined_list\n                      empty_list : LBRACE RBRACElist_with_data : LBRACE values RBRACEdefined_list : TYPE VARIABLE LBRACE values RBRACEtupla : LPAREN values RPARENvalues : value \n              | value COMMA values value : VARIABLE\n              | numbernumber : INT\n              | FLOAT'
    
_lr_action_items = {'TYPE':([0,73,87,104,110,111,115,],[6,6,6,113,113,113,113,]),'FUNCTION':([0,73,87,],[10,10,10,]),'VARIABLE':([0,6,8,10,11,19,28,29,30,31,32,33,34,35,36,43,45,46,50,52,53,54,55,56,60,62,63,73,74,75,76,77,78,79,80,81,82,83,84,87,104,105,110,111,113,115,123,125,],[7,27,40,41,44,40,-35,-36,-37,-38,-39,-40,-41,-42,-43,44,40,40,40,-19,-20,-21,-22,-23,40,40,44,7,40,-51,-52,-53,40,-54,-55,-56,-57,-58,-59,7,40,40,40,40,119,40,126,128,]),'PRINT':([0,73,87,104,110,111,115,],[17,17,17,17,17,17,17,]),'INPUT':([0,73,87,104,110,111,115,],[18,18,18,18,18,18,18,]),'IF':([0,73,87,96,104,110,111,115,],[19,19,19,105,19,19,19,19,]),'LBRACE':([0,24,25,26,27,29,30,31,32,33,34,35,36,40,47,48,59,73,87,91,96,98,99,102,103,104,109,110,111,114,115,119,124,],[8,-70,-71,-72,60,-36,-37,-38,-39,-40,-41,-42,-43,-69,73,-48,87,8,8,104,73,-49,-50,110,111,8,115,8,8,73,8,60,73,]),'INT':([0,7,8,19,44,45,46,50,52,53,54,55,56,60,62,73,74,75,76,77,78,79,80,81,82,83,84,87,91,102,104,105,110,111,115,],[25,29,25,25,29,25,25,25,-19,-20,-21,-22,-23,25,25,25,25,-51,-52,-53,25,-54,-55,-56,-57,-58,-59,25,29,29,25,25,25,25,25,]),'FLOAT':([0,7,8,19,44,45,46,50,52,53,54,55,56,60,62,73,74,75,76,77,78,79,80,81,82,83,84,87,91,102,104,105,110,111,115,],[26,33,26,26,33,26,26,26,-19,-20,-21,-22,-23,26,26,26,26,-51,-52,-53,26,-54,-55,-56,-57,-58,-59,26,33,33,26,26,26,26,26,]),'$end':([1,2,3,4,5,9,11,12,13,14,15,16,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,40,42,51,57,58,61,64,66,70,72,85,86,92,93,94,95,101,106,107,108,118,122,127,129,130,],[0,-1,-2,-3,-4,-5,-32,-6,-7,-8,-9,-10,-60,-61,-62,-70,-71,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,-69,-33,-18,-24,-25,-64,-34,-28,-31,-44,-16,-17,-26,-27,-29,-30,-65,-45,-47,-11,-15,-13,-46,-14,-12,]),'RBRACE':([2,3,4,5,8,9,11,12,13,14,15,16,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,42,51,57,58,61,64,66,70,72,85,86,88,89,92,93,94,95,97,100,101,106,107,108,112,116,118,122,126,127,128,129,130,],[-1,-2,-3,-4,37,-5,-32,-6,-7,-8,-9,-10,-60,-61,-62,-70,-71,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-63,61,-67,-69,-33,-18,-24,-25,-64,-34,-28,-31,-44,-16,-17,101,-68,-26,-27,-29,-30,107,108,-65,-45,-47,-11,118,122,-15,-13,129,-46,130,-14,-12,]),'PLUS':([7,20,24,25,26,40,68,85,],[-69,52,-70,-71,-72,-69,52,52,]),'MINUS':([7,20,24,25,26,40,68,85,],[-69,53,-70,-71,-72,-69,53,53,]),'TIMES':([7,20,24,25,26,40,68,85,],[-69,54,-70,-71,-72,-69,54,54,]),'DIVIDE':([7,20,24,25,26,40,68,85,],[-69,55,-70,-71,-72,-69,55,55,]),'ASSIGN':([7,20,24,25,26,40,68,85,],[-69,56,-70,-71,-72,-69,56,56,]),'INCREMENT':([7,20,24,25,26,40,68,85,],[-69,57,-70,-71,-72,-69,57,57,]),'DECREMENT':([7,20,24,25,26,40,68,85,],[-69,58,-70,-71,-72,-69,58,58,]),'INT32':([7,44,91,102,],[30,30,30,30,]),'INT64':([7,44,91,102,],[31,31,31,31,]),'STRING':([7,44,91,102,],[32,32,32,32,]),'FLOAT32':([7,44,91,102,],[34,34,34,34,]),'FLOAT64':([7,44,91,102,],[35,35,35,35,]),'BOOL':([7,44,91,102,],[36,36,36,36,]),'RETURN':([9,12,13,14,15,16,21,22,23,24,25,26,37,40,51,57,58,61,66,70,72,85,86,92,93,94,95,101,106,107,117,121,127,],[-5,-6,-7,-8,-9,-10,-60,-61,-62,-70,-71,-72,-63,-69,-18,-24,-25,-64,-28,-31,-44,-16,-17,-26,-27,-29,-30,-65,-45,-47,123,125,-46,]),'RPAREN':([11,24,25,26,28,29,30,31,32,33,34,35,36,39,40,42,45,46,51,57,58,63,64,65,67,68,69,71,85,86,89,90,],[-32,-70,-71,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,-67,-69,-33,66,70,-18,-24,-25,91,-34,92,93,-67,94,95,-16,-17,-68,102,]),'COMMA':([11,24,25,26,28,29,30,31,32,33,34,35,36,39,40,68,],[43,-70,-71,-72,-35,-36,-37,-38,-39,-40,-41,-42,-43,62,-69,62,]),'LPAREN':([17,18,41,],[45,46,63,]),'GREATER':([24,25,26,40,49,],[-70,-71,-72,-69,79,]),'LESS':([24,25,26,40,49,],[-70,-71,-72,-69,80,]),'GREATEREQUALS':([24,25,26,40,49,],[-70,-71,-72,-69,81,]),'LESSEQUALS':([24,25,26,40,49,],[-70,-71,-72,-69,82,]),'EQUALS':([24,25,26,40,49,],[-70,-71,-72,-69,83,]),'DIFFERENT':([24,25,26,40,49,],[-70,-71,-72,-69,84,]),'AND':([24,25,26,40,48,99,],[-70,-71,-72,-69,75,-50,]),'OR':([24,25,26,40,48,99,],[-70,-71,-72,-69,76,-50,]),'NOT':([24,25,26,40,48,99,],[-70,-71,-72,-69,77,-50,]),'STRUCT':([27,],[59,]),'ELSE':([72,107,120,],[96,-47,124,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,73,87,],[1,97,100,]),'structure':([0,73,87,],[2,2,2,]),'blocks':([0,73,87,104,110,111,115,],[3,3,3,112,116,117,121,]),'function':([0,73,87,],[4,4,4,]),'parameters':([0,11,43,63,73,87,],[5,42,64,90,5,5,]),'block':([0,73,87,104,110,111,115,],[9,9,9,9,9,9,9,]),'parameter':([0,11,43,63,73,87,],[11,11,11,11,11,11,]),'print_statement':([0,73,87,104,110,111,115,],[12,12,12,12,12,12,12,]),'input_statement':([0,73,87,104,110,111,115,],[13,13,13,13,13,13,13,]),'conditional_structure':([0,73,87,104,110,111,115,],[14,14,14,14,14,14,14,]),'operation':([0,45,46,50,73,87,104,110,111,115,],[15,67,71,86,15,15,15,15,15,15,]),'list_structure':([0,73,87,104,110,111,115,],[16,16,16,16,16,16,16,]),'value':([0,8,19,45,46,50,60,62,73,74,78,87,104,105,110,111,115,],[20,39,49,68,68,85,39,39,20,49,99,20,20,49,20,20,20,]),'empty_list':([0,73,87,104,110,111,115,],[21,21,21,21,21,21,21,]),'list_with_data':([0,73,87,104,110,111,115,],[22,22,22,22,22,22,22,]),'defined_list':([0,73,87,104,110,111,115,],[23,23,23,23,23,23,23,]),'number':([0,8,19,45,46,50,60,62,73,74,78,87,104,105,110,111,115,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'type':([7,44,91,102,],[28,28,103,109,]),'values':([8,45,46,60,62,],[38,65,69,88,89,]),'conditions':([19,74,105,],[47,98,114,]),'condition':([19,74,105,],[48,48,48,]),'operator':([20,68,85,],[50,50,50,]),'double_operator':([20,68,85,],[51,51,51,]),'conditional_body':([47,96,114,124,],[72,106,120,127,]),'logical_operator':([48,],[74,]),'relational_operator':([49,],[78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> structure','statement',1,'p_statement','analizadorSintactico.py',8),
  ('statement -> blocks','statement',1,'p_statement','analizadorSintactico.py',9),
  ('statement -> function','statement',1,'p_statement','analizadorSintactico.py',10),
  ('statement -> parameters','statement',1,'p_statement','analizadorSintactico.py',11),
  ('blocks -> block','blocks',1,'p_blocks','analizadorSintactico.py',15),
  ('block -> print_statement','block',1,'p_block','analizadorSintactico.py',19),
  ('block -> input_statement','block',1,'p_block','analizadorSintactico.py',20),
  ('block -> conditional_structure','block',1,'p_block','analizadorSintactico.py',21),
  ('block -> operation','block',1,'p_block','analizadorSintactico.py',22),
  ('block -> list_structure','block',1,'p_block','analizadorSintactico.py',23),
  ('structure -> TYPE VARIABLE STRUCT LBRACE statement RBRACE','structure',6,'p_structure','analizadorSintactico.py',27),
  ('function -> FUNCTION VARIABLE LPAREN parameters RPAREN type LBRACE blocks RETURN VARIABLE RBRACE','function',11,'p_function','analizadorSintactico.py',30),
  ('function -> FUNCTION VARIABLE LPAREN parameters RPAREN LBRACE blocks RBRACE','function',8,'p_function','analizadorSintactico.py',31),
  ('function -> FUNCTION VARIABLE LPAREN RPAREN type LBRACE blocks RETURN VARIABLE RBRACE','function',10,'p_function','analizadorSintactico.py',32),
  ('function -> FUNCTION VARIABLE LPAREN RPAREN LBRACE blocks RBRACE','function',7,'p_function','analizadorSintactico.py',33),
  ('operation -> value operator value','operation',3,'p_operation','analizadorSintactico.py',37),
  ('operation -> value operator operation','operation',3,'p_operation','analizadorSintactico.py',38),
  ('operation -> value double_operator','operation',2,'p_operation_single','analizadorSintactico.py',41),
  ('operator -> PLUS','operator',1,'p_operator','analizadorSintactico.py',44),
  ('operator -> MINUS','operator',1,'p_operator','analizadorSintactico.py',45),
  ('operator -> TIMES','operator',1,'p_operator','analizadorSintactico.py',46),
  ('operator -> DIVIDE','operator',1,'p_operator','analizadorSintactico.py',47),
  ('operator -> ASSIGN','operator',1,'p_operator','analizadorSintactico.py',48),
  ('double_operator -> INCREMENT','double_operator',1,'p_double_operator','analizadorSintactico.py',51),
  ('double_operator -> DECREMENT','double_operator',1,'p_double_operator','analizadorSintactico.py',52),
  ('print_statement -> PRINT LPAREN values RPAREN','print_statement',4,'p_print_statement','analizadorSintactico.py',55),
  ('print_statement -> PRINT LPAREN operation RPAREN','print_statement',4,'p_print_statement','analizadorSintactico.py',56),
  ('print_statement -> PRINT LPAREN RPAREN','print_statement',3,'p_print_statement','analizadorSintactico.py',57),
  ('input_statement -> INPUT LPAREN values RPAREN','input_statement',4,'p_input_statement','analizadorSintactico.py',60),
  ('input_statement -> INPUT LPAREN operation RPAREN','input_statement',4,'p_input_statement','analizadorSintactico.py',61),
  ('input_statement -> INPUT LPAREN RPAREN','input_statement',3,'p_input_statement','analizadorSintactico.py',62),
  ('parameters -> parameter','parameters',1,'p_parameters','analizadorSintactico.py',65),
  ('parameters -> parameter parameters','parameters',2,'p_parameters','analizadorSintactico.py',66),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','analizadorSintactico.py',67),
  ('parameter -> VARIABLE type','parameter',2,'p_parameter','analizadorSintactico.py',71),
  ('type -> INT','type',1,'p_type','analizadorSintactico.py',74),
  ('type -> INT32','type',1,'p_type','analizadorSintactico.py',75),
  ('type -> INT64','type',1,'p_type','analizadorSintactico.py',76),
  ('type -> STRING','type',1,'p_type','analizadorSintactico.py',77),
  ('type -> FLOAT','type',1,'p_type','analizadorSintactico.py',78),
  ('type -> FLOAT32','type',1,'p_type','analizadorSintactico.py',79),
  ('type -> FLOAT64','type',1,'p_type','analizadorSintactico.py',80),
  ('type -> BOOL','type',1,'p_type','analizadorSintactico.py',81),
  ('conditional_structure -> IF conditions conditional_body','conditional_structure',3,'p_conditional_structure','analizadorSintactico.py',85),
  ('conditional_structure -> IF conditions conditional_body ELSE conditional_body','conditional_structure',5,'p_conditional_structure','analizadorSintactico.py',86),
  ('conditional_structure -> IF conditions conditional_body ELSE IF conditions conditional_body ELSE conditional_body','conditional_structure',9,'p_conditional_structure','analizadorSintactico.py',87),
  ('conditional_body -> LBRACE statement RBRACE','conditional_body',3,'p_conditional_body','analizadorSintactico.py',89),
  ('conditions -> condition','conditions',1,'p_conditions','analizadorSintactico.py',92),
  ('conditions -> condition logical_operator conditions','conditions',3,'p_conditions','analizadorSintactico.py',93),
  ('condition -> value relational_operator value','condition',3,'p_condition','analizadorSintactico.py',97),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','analizadorSintactico.py',100),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','analizadorSintactico.py',101),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','analizadorSintactico.py',102),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','analizadorSintactico.py',105),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','analizadorSintactico.py',106),
  ('relational_operator -> GREATEREQUALS','relational_operator',1,'p_relational_operator','analizadorSintactico.py',107),
  ('relational_operator -> LESSEQUALS','relational_operator',1,'p_relational_operator','analizadorSintactico.py',108),
  ('relational_operator -> EQUALS','relational_operator',1,'p_relational_operator','analizadorSintactico.py',109),
  ('relational_operator -> DIFFERENT','relational_operator',1,'p_relational_operator','analizadorSintactico.py',110),
  ('list_structure -> empty_list','list_structure',1,'p_list_structure','analizadorSintactico.py',114),
  ('list_structure -> list_with_data','list_structure',1,'p_list_structure','analizadorSintactico.py',115),
  ('list_structure -> defined_list','list_structure',1,'p_list_structure','analizadorSintactico.py',116),
  ('empty_list -> LBRACE RBRACE','empty_list',2,'p_empty_list','analizadorSintactico.py',120),
  ('list_with_data -> LBRACE values RBRACE','list_with_data',3,'p_list_with_data','analizadorSintactico.py',123),
  ('defined_list -> TYPE VARIABLE LBRACE values RBRACE','defined_list',5,'p_defined_list','analizadorSintactico.py',126),
  ('tupla -> LPAREN values RPAREN','tupla',3,'p_tupla','analizadorSintactico.py',129),
  ('values -> value','values',1,'p_values','analizadorSintactico.py',133),
  ('values -> value COMMA values','values',3,'p_values','analizadorSintactico.py',134),
  ('value -> VARIABLE','value',1,'p_value','analizadorSintactico.py',138),
  ('value -> number','value',1,'p_value','analizadorSintactico.py',139),
  ('number -> INT','number',1,'p_number','analizadorSintactico.py',142),
  ('number -> FLOAT','number',1,'p_number','analizadorSintactico.py',143),
]
